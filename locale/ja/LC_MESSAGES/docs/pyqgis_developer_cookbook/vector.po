# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Richard Duivenvoorde <richard@duif.net>, 2020
# mnamihdk, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-10 11:07+0200\n"
"PO-Revision-Date: 2020-03-16 19:23+0000\n"
"Last-Translator: mnamihdk, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/qgis/teams/6144/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:11
msgid ""
"The code snippets on this page need the following imports if you're outside "
"the pyqgis console:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:53
msgid "Using Vector Layers"
msgstr "ベクターレイヤーを使う"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:58
msgid ""
"This section summarizes various actions that can be done with vector layers."
msgstr "このセクションではベクターレイヤーに対して行える様々な操作について紹介していきます."

#: ../../docs/pyqgis_developer_cookbook/vector.rst:60
msgid ""
"Most work here is based on the methods of the :class:`QgsVectorLayer "
"<qgis.core.QgsVectorLayer>` class."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:66
msgid "Retrieving information about attributes"
msgstr "属性に関する情報を取得する"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:68
msgid ""
"You can retrieve information about the fields associated with a vector layer"
" by calling :meth:`fields() <qgis.core.QgsVectorLayer.fields>` on a "
":class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` object:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:89
msgid "Iterating over Vector Layer"
msgstr "ベクターレイヤーの反復処理"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:91
msgid ""
"Iterating over the features in a vector layer is one of the most common "
"tasks. Below is an example of the simple basic code to perform this task and"
" showing some information about each feature. The ``layer`` variable is "
"assumed to have a :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` object."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:150
msgid "Selecting features"
msgstr "地物の選択"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:152
msgid ""
"In QGIS desktop, features can be selected in different ways: the user can "
"click on a feature, draw a rectangle on the map canvas or use an expression "
"filter. Selected features are normally highlighted in a different color "
"(default is yellow) to draw user's attention on the selection."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:157
msgid ""
"Sometimes it can be useful to programmatically select features or to change "
"the default color."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:160
msgid ""
"To select all the features, the :meth:`selectAll() "
"<qgis.core.QgsVectorLayer.selectAll>` method can be used:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:168
msgid ""
"To select using an expression, use the :meth:`selectByExpression() "
"<qgis.core.QgsVectorLayer.selectByExpression>` method:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:177
msgid ""
"To change the selection color you can use :meth:`setSelectionColor() "
"<qgis.gui.QgsMapCanvas.setSelectionColor>` method of :class:`QgsMapCanvas "
"<qgis.gui.QgsMapCanvas>` as shown in the following example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:185
msgid ""
"To add features to the selected features list for a given layer, you can "
"call :meth:`select() <qgis.core.QgsVectorLayer.select>` passing to it the "
"list of features IDs:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:200
msgid "To clear the selection:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:207
msgid "Accessing attributes"
msgstr "属性にアクセスする"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:209
msgid "Attributes can be referred to by their name:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:219
msgid ""
"Alternatively, attributes can be referred to by index. This is a bit faster "
"than using the name. For example, to get the second attribute:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:233
msgid "Iterating over selected features"
msgstr "選択された地物への反復処理"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:235
msgid ""
"If you only need selected features, you can use the "
":meth:`selectedFeatures() <qgis.core.QgsVectorLayer.selectedFeatures>` "
"method from the vector layer:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:247
msgid "Iterating over a subset of features"
msgstr "一部の地物への反復処理"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:249
msgid ""
"If you want to iterate over a given subset of features in a layer, such as "
"those within a given area, you have to add a :class:`QgsFeatureRequest "
"<qgis.core.QgsFeatureRequest>` object to the :meth:`getFeatures() "
"<qgis.core.QgsVectorLayer.getFeatures>` call. Here's an example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:263
msgid ""
"For the sake of speed, the intersection is often done only using feature’s "
"bounding box. There is however a flag ``ExactIntersect`` that makes sure "
"that only intersecting features will be returned:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:272
msgid ""
"With :meth:`setLimit() <qgis.core.QgsFeatureRequest.setLimit>` you can limit"
" the number of requested features. Here's an example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:286
msgid ""
"If you need an attribute-based filter instead (or in addition) of a spatial "
"one like shown in the examples above, you can build a :class:`QgsExpression "
"<qgis.core.QgsExpression>` object and pass it to the "
":class:`QgsFeatureRequest <qgis.core.QgsFeatureRequest>` constructor. Here's"
" an example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:299
msgid ""
"See :ref:`expressions` for the details about the syntax supported by "
":class:`QgsExpression <qgis.core.QgsExpression>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:301
msgid ""
"The request can be used to define the data retrieved for each feature, so "
"the iterator returns all features, but returns partial data for each of "
"them."
msgstr ""
"要求は、地物ごとに取得したデータを定義するために使用できるので、反復子はすべての地物を返しますが、それぞれの地物については部分的データを返します。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:326
msgid "Modifying Vector Layers"
msgstr "ベクターレイヤーを修正する"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:328
msgid ""
"Most vector data providers support editing of layer data. Sometimes they "
"support just a subset of possible editing actions. Use the "
":meth:`capabilities() <qgis.core.QgsVectorDataProvider.capabilities>` "
"function to find out what set of functionality is supported."
msgstr ""
"大部分のベクターデータプロバイダーは、レイヤーの編集をサポートしています。プロバイダーによっては、可能な編集操作の一部だけしかサポートしていないこともあります。どんな機能をサポートしているかを知るには、"
" :meth:`capabilities() <qgis.core.QgsVectorDataProvider.capabilities>` "
"関数を使ってください。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:344
msgid ""
"For a list of all available capabilities, please refer to the :class:`API "
"Documentation of QgsVectorDataProvider <qgis.core.QgsVectorDataProvider>`."
msgstr ""
"可能な性能をすべて知るには、 :class:`API Documentation of QgsVectorDataProvider "
"<qgis.core.QgsVectorDataProvider>` を参照してください。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:348
msgid ""
"To print layer's capabilities textual description in a comma separated list "
"you can use :meth:`capabilitiesString() "
"<qgis.core.QgsVectorDataProvider.capabilitiesString>` as in the following "
"example:"
msgstr ""
":meth:`capabilitiesString() "
"<qgis.core.QgsVectorDataProvider.capabilitiesString>` "
"を使うと、下記の例に見るように、レイヤーの性能の説明文をコンマで区切られたリストの形で表示することができます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:361
msgid ""
"By using any of the following methods for vector layer editing, the changes "
"are directly committed to the underlying data store (a file, database etc). "
"In case you would like to do only temporary changes, skip to the next "
"section that explains how to do :ref:`modifications with editing buffer "
"<editing-buffer>`."
msgstr ""
"ベクターレイヤーを編集する以下の方法はいずれも、変更が直接、レイヤーの裏にあるデータストア（ファイルやデータベースなど）にコミットされます。一時的な変更をしたいだけの場合にどうすればよいかの説明は、次のセクション"
" :ref:`ベクターレイヤーを編集バッファで修正する <editing-buffer>` でしているので、以下を飛ばしてそちらに進んでください。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:369
msgid ""
"If you are working inside QGIS (either from the console or from a plugin), "
"it might be necessary to force a redraw of the map canvas in order to see "
"the changes you've done to the geometry, to the style or to the attributes:"
msgstr ""
"QGISの内部（コンソールまたはプラグインのいずれか）で作業している場合、ジオメトリ、スタイル、属性に加えられた変更を確認するために、以下のように地図キャンバスの強制的な再描画が必要になることもあります。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:384
msgid "Add Features"
msgstr "地物の追加"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:386
msgid ""
"Create some :class:`QgsFeature <qgis.core.QgsFeature>` instances and pass a "
"list of them to provider's :meth:`addFeatures() "
"<qgis.core.QgsVectorDataProvider.addFeatures>` method. It will return two "
"values: result (true/false) and list of added features (their ID is set by "
"the data store)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:390
msgid ""
"To set up the attributes of the feature, you can either initialize the "
"feature passing a :class:`QgsFields <qgis.core.QgsFields>` object (you can "
"obtain that from the :meth:`fields() <qgis.core.QgsVectorLayer.fields>` "
"method of the vector layer) or call :meth:`initAttributes() "
"<qgis.core.QgsFeature.initAttributes>` passing the number of fields you want"
" to be added."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:409
msgid "Delete Features"
msgstr "地物の削除"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:411
msgid "To delete some features, just provide a list of their feature IDs."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:419
msgid "Modify Features"
msgstr "地物の修正"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:421
msgid ""
"It is possible to either change feature's geometry or to change some "
"attributes. The following example first changes values of attributes with "
"index 0 and 1, then it changes the feature's geometry."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:438
msgid "**Favor QgsVectorLayerEditUtils class for geometry-only edits**"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:440
msgid ""
"If you only need to change geometries, you might consider using the "
":class:`QgsVectorLayerEditUtils <qgis.core.QgsVectorLayerEditUtils>` which "
"provides some useful methods to edit geometries (translate, insert or move "
"vertex, etc.)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:447
msgid "Modifying Vector Layers with an Editing Buffer"
msgstr "ベクターレイヤーを編集バッファで修正する"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:449
msgid ""
"When editing vectors within QGIS application, you have to first start "
"editing mode for a particular layer, then do some modifications and finally "
"commit (or rollback) the changes. All the changes you make are not written "
"until you commit them --- they stay in layer's in-memory editing buffer. It "
"is possible to use this functionality also programmatically --- it is just "
"another method for vector layer editing that complements the direct usage of"
" data providers. Use this option when providing some GUI tools for vector "
"layer editing, since this will allow user to decide whether to "
"commit/rollback and allows the usage of undo/redo. When changes are "
"commited, all changes from the editing buffer are saved to data provider."
msgstr ""
"ベクターデータをQGISアプリケーション内で編集するときは、特定のレイヤーでまず編集モードを開始し、それから何らかの変更を加え、最後に変更をコミット（もしくはロールバック）しなければなりません。すべての変更は、それをコミットするまでは書き込まれず、レイヤーのインメモリー編集バッファに留まり続けます。この機能はプログラムから使用することも可能です。そしてこれが、データプロバイダーの直接的な使用を補完する、ベクターレイヤー編集のためのもうひとつの方法です。ベクターレイヤ編集のために何らかのGUIツールを提供する際には、このオプションを使用してください。これによって、ユーザにコミットするかロールバックするかを選択させることができ、また、おなじみの取り消し／やり直し機能の提供も可能になるからです。変更がコミットされたときに、編集バッファ内のすべての変更はデータプロバイダーに保存されます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:460
msgid ""
"The methods are similar to the ones we have seen in the provider, but they "
"are called on the :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` object "
"instead."
msgstr ""
"メソッドはすでに見たプロバイダーにおけるものとよく似ていますが、プロバイダーではなく :class:`QgsVectorLayer "
"<qgis.core.QgsVectorLayer>` オブジェクトで呼び出されます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:464
msgid ""
"For these methods to work, the layer must be in editing mode. To start the "
"editing mode, use the :meth:`startEditing() "
"<qgis.core.QgsVectorLayer.startEditing>` method. To stop editing, use the "
":meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` or "
":meth:`rollBack() <qgis.core.QgsVectorLayer.rollBack>` methods. The first "
"one will commit all your changes to the data source, while the second one "
"will discard them and will not modify the data source at all."
msgstr ""
"これらのメソッドが機能するためには、そのレイヤーは編集モードでなければいけません。編集モードを開始するには、 :meth:`startEditing()"
" <qgis.core.QgsVectorLayer.startEditing>` メソッドを使用します。編集を終了するには、 "
":meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` メソッドか、もしくは "
":meth:`rollBack() <qgis.core.QgsVectorLayer.rollBack>` "
"メソッドを使用します。前者はすべての変更をデータソースにコミットします。一方後者は変更をすべて破棄し、データソースには一切、手をつけません。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:471
msgid ""
"To find out whether a layer is in editing mode, use the :meth:`isEditable() "
"<qgis.core.QgsVectorLayer.isEditable>` method."
msgstr ""
"あるレイヤーが編集モードかどうかを知るには、 :meth:`isEditable() "
"<qgis.core.QgsVectorLayer.isEditable>` メソッドを使用してください。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:474
msgid ""
"Here you have some examples that demonstrate how to use these editing "
"methods."
msgstr "では、これら編集メソッドの使用方法を示す実例をいくつか見てもらいます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:502
msgid ""
"In order to make undo/redo work properly, the above mentioned calls have to "
"be wrapped into undo commands. (If you do not care about undo/redo and want "
"to have the changes stored immediately, then you will have easier work by "
":ref:`editing with data provider <editing>`.)"
msgstr ""
"取り消し／やり直しを適切に機能させるためには、上記のメソッド呼び出しを undo "
"コマンドでラップしなければなりません。取り消し／やり直し機能が不要で、変更を即座に保存したい場合は、 :ref:`データプロバイダを使って編集 "
"<editing>` したほうが手軽でしょう。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:507
msgid "Here is how you can use the undo functionality:"
msgstr "取り消し機能を使用するには次のように行います。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:524
msgid ""
"The :meth:`beginEditCommand() <qgis.core.QgsVectorLayer.beginEditCommand>` "
"method will create an internal \"active\" command and will record subsequent"
" changes in vector layer. With the call to :meth:`endEditCommand() "
"<qgis.core.QgsVectorLayer.endEditCommand>` the command is pushed onto the "
"undo stack and the user will be able to undo/redo it from GUI. In case "
"something went wrong while doing the changes, the "
":meth:`destroyEditCommand() <qgis.core.QgsVectorLayer.destroyEditCommand>` "
"method will remove the command and rollback all changes done while this "
"command was active."
msgstr ""
":meth:`beginEditCommand() <qgis.core.QgsVectorLayer.beginEditCommand>` "
"メソッドは内部的に「アクティブな」コマンドを生成し、ベクターレイヤーでその後に起こる変化を記録し続けます。 "
":meth:`endEditCommand() <qgis.core.QgsVectorLayer.endEditCommand>` "
"メソッドの呼び出しによって、コマンドはアンドゥスタックにプッシュされ、ユーザーがGUIから取り消し／やり直しをすることができるようになります。変更の最中に何か不具合が生じたときは、"
" :meth:`destroyEditCommand() <qgis.core.QgsVectorLayer.destroyEditCommand>` "
"メソッドによってコマンドは削除され、コマンドがアクティブな間に行われたすべての変更はロールバックされます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:531
msgid ""
"You can also use the :code:`with edit(layer)`-statement to wrap commit and "
"rollback into a more semantic code block as shown in the example below:"
msgstr ""
"次の例に示すように、よりセマンティックなコードブロックにコミットとロールバックをラップする :code:`with edit(layer)` "
"文も使用できます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:542
msgid ""
"This will automatically call :meth:`commitChanges() "
"<qgis.core.QgsVectorLayer.commitChanges>` in the end. If any exception "
"occurs, it will :meth:`rollBack() <qgis.core.QgsVectorLayer.rollBack>` all "
"the changes. In case a problem is encountered within :meth:`commitChanges() "
"<qgis.core.QgsVectorLayer.commitChanges>` (when the method returns False) a "
":class:`QgsEditError <qgis.core.QgsEditError>` exception will be raised."
msgstr ""
"これは最後に :meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` "
"メソッドを自動的に呼び出します。もし何らかの例外が発生したときは、 :meth:`rollBack() "
"<qgis.core.QgsVectorLayer.rollBack>` メソッドを呼び出してすべての変更をロールバックします。 "
":meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` "
"メソッドの実行の最中に問題に遭遇したとき（メソッドが False を返したとき）は、 :class:`QgsEditError "
"<qgis.core.QgsEditError>` 例外を送出します。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:548
msgid "Adding and Removing Fields"
msgstr "フィールドを追加または削除する"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:550
msgid ""
"To add fields (attributes), you need to specify a list of field definitions."
" For deletion of fields just provide a list of field indexes."
msgstr ""
"フィールド（属性）を追加するには、フィールドの定義を配列で指定する必要があります。フィールドを削除するにはフィールドのインデックスを配列で渡すだけです。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:565
msgid ""
"After adding or removing fields in the data provider the layer's fields need"
" to be updated because the changes are not automatically propagated."
msgstr "データプロバイダーのフィールドを追加または削除した後、レイヤーのフィールドは、変更が自動的に反映されていないため、更新する必要があります。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:572
msgid "**Directly save changes using** ``with`` **based command**"
msgstr "``with`` **に基づくコマンドを使って変更を直接保存する**"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:574
msgid ""
"Using ``with edit(layer):`` the changes will be commited automatically "
"calling :meth:`commitChanges() <qgis.core.QgsVectorLayer.commitChanges>` at "
"the end. If any exception occurs, it will :meth:`rollBack() "
"<qgis.core.QgsVectorLayer.rollBack>` all the changes. See :ref:`editing-"
"buffer`."
msgstr ""
"``with edit(layer):`` を使うことによって、 :meth:`commitChanges() "
"<qgis.core.QgsVectorLayer.commitChanges>` "
"メソッドが最後に自動的に呼び出され、変更がコミットされます。例外が発生した場合は、 :meth:`rollBack() "
"<qgis.core.QgsVectorLayer.rollBack>` メソッドが呼び出され、すべての変更がロールバックされます。 :ref"
":`editing-buffer` を参照してください。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:582
msgid "Using Spatial Index"
msgstr "空間索引を使う"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:584
msgid ""
"Spatial indexes can dramatically improve the performance of your code if you"
" need to do frequent queries to a vector layer. Imagine, for instance, that "
"you are writing an interpolation algorithm, and that for a given location "
"you need to know the 10 closest points from a points layer, in order to use "
"those point for calculating the interpolated value. Without a spatial index,"
" the only way for QGIS to find those 10 points is to compute the distance "
"from each and every point to the specified location and then compare those "
"distances. This can be a very time consuming task, especially if it needs to"
" be repeated for several locations. If a spatial index exists for the layer,"
" the operation is much more effective."
msgstr ""
"空間索引は、頻繁にベクターレイヤーに問い合わせをする必要がある場合、コードのパフォーマンスを劇的に改善します。例えば、補間アルゴリズムを書いていて、補間値の計算に使用するために与えられた位置に対して最も近い10点をポイントレイヤーから求める必要がある、と想像してください。空間索引が無いと、QGISがこれらの10点を求める方法は、すべての点から指定の場所への距離を計算してそれらの距離を比較することしかありません。これは、いくつかの場所について繰り返す必要がある場合は特に、非常に時間のかかる処理となります。もし空間索引がレイヤーに作成されていれば、処理はもっと効率的になります。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:595
msgid ""
"Think of a layer without a spatial index as a telephone book in which "
"telephone numbers are not ordered or indexed. The only way to find the "
"telephone number of a given person is to read from the beginning until you "
"find it."
msgstr ""
"空間索引の無いレイヤーは、電話番号が順番に並んでいない、もしくは索引の無い電話帳と思ってください。所定の人の電話番号を見つける唯一の方法は、巻頭からその番号を見つけるまで読むだけです。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:599
msgid ""
"Spatial indexes are not created by default for a QGIS vector layer, but you "
"can create them easily. This is what you have to do:"
msgstr "空間索引は、QGISベクターレイヤーに対してデフォルトでは作成されていませんが、簡単に作成できます。しなければいけないことはこうです："

#: ../../docs/pyqgis_developer_cookbook/vector.rst:602
msgid ""
"create spatial index using the :class:`QgsSpatialIndex() "
"<qgis.core.QgsSpatialIndex>` class:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:609
msgid ""
"add features to index --- index takes :class:`QgsFeature "
"<qgis.core.QgsFeature>` object and adds it to the internal data structure. "
"You can create the object manually or use one from a previous call to the "
"provider's :meth:`getFeatures() "
"<qgis.core.QgsVectorDataProvider.getFeatures>` method."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:618
msgid ""
"alternatively, you can load all features of a layer at once using bulk "
"loading"
msgstr "代わりに、一括読み込みを使用してレイヤーのすべての地物を一度に読み込むことができます"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:624
msgid "once spatial index is filled with some values, you can do some queries"
msgstr "空間索引に何かしらの値が入れられると検索ができるようになります"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:638
msgid "Creating Vector Layers"
msgstr "ベクターレイヤを作る"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:640
msgid "There are several ways to generate a vector layer dataset:"
msgstr "ベクターレイヤデータセットを作るには幾つかの方法があります。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:642
msgid ""
"the :class:`QgsVectorFileWriter <qgis.core.QgsVectorFileWriter>` class: A "
"convenient class for writing vector files to disk, using either a static "
"call to :meth:`writeAsVectorFormat() "
"<qgis.core.QgsVectorFileWriter.writeAsVectorFormat>` which saves the whole "
"vector layer or creating an instance of the class and issue calls to "
":meth:`addFeature() <qgis.core.QgsVectorFileWriter.addFeature>`. This class "
"supports all the vector formats that OGR supports (GeoPackage, Shapefile, "
"GeoJSON, KML and others)."
msgstr ""
":class:`QgsVectorFileWriter <qgis.core.QgsVectorFileWriter>` "
"クラス：ベクターファイルをディスクに書きこむための便利なクラスです。静的メソッド :meth:`writeAsVectorFormat() "
"<qgis.core.QgsVectorFileWriter.writeAsVectorFormat>` "
"を呼び出してすべてのベクターレイヤを保存するか、もしくはクラスインスタンスを作ってから :meth:`addFeature() "
"<qgis.core.QgsVectorFileWriter.addFeature>` "
"メソッドを呼び出すか、いずれかの方法を使うことができます。このクラスはGeoPackage、Shapefile、GeoJSON、KMLその他のすべてのOGRがサポートするベクターフォーマットをサポートしています。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:650
msgid ""
"the :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` class: instantiates a"
" data provider that interprets the supplied path (url) of the data source to"
" connect to and access the data. It can be used to create temporary, memory-"
"based layers (``memory``) and connect to OGR datasets (``ogr``), databases "
"(``postgres``, ``spatialite``, ``mysql``, ``mssql``) and more (``wfs``, "
"``gpx``, ``delimitedtext``...)."
msgstr ""
":class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` クラス：データソースの指定されたパス (url) "
"を解釈してデータに接続し、アクセスしたデータプロバイダをインスタンス化します。メモリ上の一時的なレイヤ(``memory``) "
"を作ったり、OGRデータセット(``ogr``) やデータベース (``postgres``, ``spatialite``, ``mysql``, "
"``mssql``) やその他 (``wfs``, ``gpx``, ``delimitedtext``...) に接続するために使うことができます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:659
msgid ""
"From an instance of :class:`QgsVectorFileWriter "
"<qgis.core.QgsVectorFileWriter>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:724
msgid ""
"You can also convert fields to make them compatible with different formats "
"by using the  :class:`FieldValueConverter "
"<qgis.core.QgsVectorFileWriter.FieldValueConverter>`. For example, to "
"convert array variable types (e.g. in Postgres) to a text type, you can do "
"the following:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:761
msgid ""
"A destination CRS may also be specified --- if a valid instance of "
":class:`QgsCoordinateReferenceSystem "
"<qgis.core.QgsCoordinateReferenceSystem>` is passed as the fourth parameter,"
" the layer is transformed to that CRS."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:765
msgid ""
"For valid driver names please call the :meth:`supportedFiltersAndFormats "
"<qgis.core.QgsVectorFileWriter.supportedFiltersAndFormats>` method or "
"consult the `supported formats by OGR`_ --- you should pass the value in the"
" \"Code\" column as the driver name."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:770
msgid ""
"Optionally you can set whether to export only selected features, pass "
"further driver-specific options for creation or tell the writer not to "
"create attributes... There are a number of other (optional) parameters; see "
"the :class:`QgsVectorFileWriter <qgis.core.QgsVectorFileWriter>` "
"documentation for details."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:777
msgid "Directly from features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:830
msgid "From an instance of :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>`"
msgstr ":class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` クラスのインスタンスから作成する"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:832
msgid ""
"Among all the data providers supported by the :class:`QgsVectorLayer "
"<qgis.core.QgsVectorLayer>` class, let's focus on the memory-based layers. "
"Memory provider is intended to be used mainly by plugin or 3rd party app "
"developers. It does not store data on disk, allowing developers to use it as"
" a fast backend for some temporary layers."
msgstr ""
":class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` "
"クラスによってサポートされているすべてのデータプロバイダのうちから、ここではメモリレイヤに焦点をあてましょう。メモリプロバイダは主にプラグインやサードパーティ製アプリの開発者に使われることを意図しています。ディスクにデータを格納することをしないため、開発者はなんらかの一時的なレイヤのための手っ取り早いバックエンドとしてこれを使うことができます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:838
msgid "The provider supports string, int and double fields."
msgstr "このプロバイダは属性フィールドの型として string、int、double をサポートします。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:840
msgid ""
"The memory provider also supports spatial indexing, which is enabled by "
"calling the provider's :meth:`createSpatialIndex() "
"<qgis.core.QgsVectorDataProvider.createSpatialIndex>` function. Once the "
"spatial index is created you will be able to iterate over features within "
"smaller regions faster (since it's not necessary to traverse all the "
"features, only those in specified rectangle)."
msgstr ""
"メモリプロバイダは空間インデックスもサポートしています。これはプロバイダの :meth:`createSpatialIndex() "
"<qgis.core.QgsVectorDataProvider.createSpatialIndex>` "
"関数を呼び出すことによって有効になります。空間インデックスが作成されると、複数の地物にわたって行う処理を、より小さな領域内でより速く行うことができます。これはあらためて地物すべてを走査する必要がなく、指定された領域内のみを走査すればよいからです。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:847
msgid ""
"A memory provider is created by passing ``\"memory\"`` as the provider "
"string to the :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` "
"constructor."
msgstr ""
"メモリプロバイダは :class:`QgsVectorLayer <qgis.core.QgsVectorLayer>` "
"コンストラクタにプロバイダ文字列として ``\"memory\"`` を渡すと作ることができます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:850
msgid ""
"The constructor also takes a URI defining the geometry type of the layer, "
"one of: ``\"Point\"``, ``\"LineString\"``, ``\"Polygon\"``, "
"``\"MultiPoint\"``, ``\"MultiLineString\"``, ``\"MultiPolygon\"`` or "
"``\"None\"``."
msgstr ""
"コンストラクタはレイヤのジオメトリタイプを定義するURIも必要とします。これは "
"``\"Point\"``、``\"LineString\"``、``\"Polygon\"``、``\"MultiPoint\"``、``\"MultiLineString\"``、``\"MultiPolygon\"``、``\"None\"``のうちのひとつです。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:854
msgid ""
"The URI can also specify the coordinate reference system, fields, and "
"indexing of the memory provider in the URI. The syntax is:"
msgstr "URIではメモリプロバイダの座標参照系、属性フィールド、URI内でのメモリプロバイダのインデックスも指定できます。構文は、"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:860
msgid "crs=definition"
msgstr "crs=definition"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:858
msgid ""
"Specifies the coordinate reference system, where definition may be any of "
"the forms accepted by :meth:`QgsCoordinateReferenceSystem.createFromString "
"<qgis.core.QgsCoordinateReferenceSystem.createFromString>`"
msgstr ""
"座標参照系を指定します。ここでの定義は :meth:`QgsCoordinateReferenceSystem.createFromString "
"<qgis.core.QgsCoordinateReferenceSystem.createFromString>` "
"で有効な形式のいずれかを使用します。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:863
msgid "index=yes"
msgstr "index=yes"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:863
msgid "Specifies that the provider will use a spatial index"
msgstr "プロバイダーが空間インデックスを使うように指定します。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:868
msgid "field=name:type(length,precision)"
msgstr "field=name:type(length,precision)"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:866
msgid ""
"Specifies an attribute of the layer.  The attribute has a name, and "
"optionally a type (integer, double, or string), length, and precision. There"
" may be multiple field definitions."
msgstr ""
"レイヤーの属性を指定します。属性は名前を持ち、オプションとして型(integer, double, "
"string)、長さ、および精度を持ちます。フィールドの定義は複数あってかまいません。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:870
msgid "The following example of a URI incorporates all these options"
msgstr "次のサンプルは全てのこれらのオプションを含んだURLです::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:876
msgid ""
"The following example code illustrates creating and populating a memory "
"provider"
msgstr "次のサンプルコードはメモリプロバイダーを作成してデータ投入をしている様子です::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:902
msgid "Finally, let's check whether everything went well"
msgstr "最後にやったことを全て確認していきましょう::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:927
msgid "Appearance (Symbology) of Vector Layers"
msgstr "ベクタレイヤの表現(シンボロジ)"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:929
msgid ""
"When a vector layer is being rendered, the appearance of the data is given "
"by **renderer** and **symbols** associated with the layer.  Symbols are "
"classes which take care of drawing of visual representation of features, "
"while renderers determine what symbol will be used for a particular feature."
msgstr ""
"ベクタレイヤがレンダリングされるとき、データの表現はレイヤに関連付けられた **レンダラー** と **シンボル** "
"によって決定されます。シンボルは地物の視覚的表現を処理するクラスで、レンダラはそれぞれの地物でどのシンボルが使われるかを決定します。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:934
msgid "The renderer for a given layer can be obtained as shown below:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:940
msgid "And with that reference, let us explore it a bit"
msgstr "この参照を利用して、少しだけ探索してみましょう::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:950
msgid ""
"There are several known renderer types available in the QGIS core library:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:953
msgid "Type"
msgstr "タイプ"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:953
msgid "Class"
msgstr "クラス"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:953
msgid "Description"
msgstr "詳細"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:955
msgid "singleSymbol"
msgstr "singleSymbol"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:955
msgid ":class:`QgsSingleSymbolRenderer <qgis.core.QgsSingleSymbolRenderer>`"
msgstr ":class:`QgsSingleSymbolRenderer <qgis.core.QgsSingleSymbolRenderer>`"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:955
msgid "Renders all features with the same symbol"
msgstr "単一シンボル。全ての地物を同じシンボルでレンダリングします"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:956
msgid "categorizedSymbol"
msgstr "categorizedSymbol"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:956
msgid ""
":class:`QgsCategorizedSymbolRenderer "
"<qgis.core.QgsCategorizedSymbolRenderer>`"
msgstr ""
":class:`QgsCategorizedSymbolRenderer "
"<qgis.core.QgsCategorizedSymbolRenderer>`"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:956
msgid "Renders features using a different symbol for each category"
msgstr "分類されたシンボル。カテゴリごとに違うシンボルを使って地物をレンダリングします"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:957
msgid "graduatedSymbol"
msgstr "graduatedSymbol"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:957
msgid ""
":class:`QgsGraduatedSymbolRenderer  <qgis.core.QgsGraduatedSymbolRenderer>`"
msgstr ""
":class:`QgsGraduatedSymbolRenderer  <qgis.core.QgsGraduatedSymbolRenderer>`"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:957
msgid "Renders features using a different symbol for each range of values"
msgstr "段階に分けられたシンボル。それぞれの範囲の値によって違うシンボルを使って地物をレンダリングします"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:960
msgid ""
"There might be also some custom renderer types, so never make an assumption "
"there are just these types. You can query the application's "
":class:`QgsRendererRegistry <qgis.core.QgsRendererRegistry>` to find out "
"currently available renderers:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:972
msgid ""
"It is possible to obtain a dump of a renderer contents in text form --- can "
"be useful for debugging"
msgstr "レンダラーの中身をテキストフォームにダンプできます --- デバッグ時に役に立つでしょう::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:986
msgid "Single Symbol Renderer"
msgstr "単一シンボルレンダラー"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:988
msgid ""
"You can get the symbol used for rendering by calling :meth:`symbol() "
"<qgis.core.QgsSingleSymbolRenderer.symbol>` method and change it with "
":meth:`setSymbol() <qgis.core.QgsSingleSymbolRenderer.setSymbol>` method "
"(note for C++ devs: the renderer takes ownership of the symbol.)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:992
msgid ""
"You can change the symbol used by a particular vector layer by calling "
":meth:`setSymbol() <qgis.core.QgsSingleSymbolRenderer.setSymbol>` passing an"
" instance of the appropriate symbol instance. Symbols for *point*, *line* "
"and *polygon* layers can be created by calling the :meth:`createSimple() "
"<qgis.core.QgsMarkerSymbol.createSimple>` function of the corresponding "
"classes :class:`QgsMarkerSymbol <qgis.core.QgsMarkerSymbol>`, "
":class:`QgsLineSymbol <qgis.core.QgsLineSymbol>` and :class:`QgsFillSymbol "
"<qgis.core.QgsFillSymbol>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:999
msgid ""
"The dictionary passed to :meth:`createSimple() "
"<qgis.core.QgsMarkerSymbol.createSimple>` sets the style properties of the "
"symbol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1002
msgid ""
"For example you can replace the symbol used by a particular **point** layer "
"by calling :meth:`setSymbol() <qgis.core.QgsSingleSymbolRenderer.setSymbol>`"
" passing an instance of a :class:`QgsMarkerSymbol "
"<qgis.core.QgsMarkerSymbol>`, as in the following code example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1013
msgid ""
"``name`` indicates the shape of the marker, and can be any of the following:"
msgstr "``name`` は、マーカーの形状を示しており、以下のいずれかとすることができます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1015
msgid "``circle``"
msgstr "``circle``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1016
msgid "``square``"
msgstr "``square``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1017
msgid "``cross``"
msgstr "``cross``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1018
msgid "``rectangle``"
msgstr "``rectangle``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1019
msgid "``diamond``"
msgstr "``diamond``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1020
msgid "``pentagon``"
msgstr "``pentagon``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1021
msgid "``triangle``"
msgstr "``triangle``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1022
msgid "``equilateral_triangle``"
msgstr "``equilateral_triangle``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1023
msgid "``star``"
msgstr "``star``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1024
msgid "``regular_star``"
msgstr "``regular_star``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1025
msgid "``arrow``"
msgstr "``arrow``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1026
msgid "``filled_arrowhead``"
msgstr "``filled_arrowhead``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1027
msgid "``x``"
msgstr "``x``"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1030
msgid ""
"To get the full list of properties for the first symbol layer of a symbol "
"instance you can follow the example code:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1041
msgid "This can be useful if you want to alter some properties:"
msgstr "いくつかのプロパティを変更したい場合に便利です:"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1060
msgid "Categorized Symbol Renderer"
msgstr "分類シンボルレンダラー"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1062
msgid ""
"When using a categorized renderer, you can query and set the attribute that "
"is used for classification: use the :meth:`classAttribute() "
"<qgis.core.QgsCategorizedSymbolRenderer.classAttribute>` and "
":meth:`setClassAttribute() "
"<qgis.core.QgsCategorizedSymbolRenderer.setClassAttribute>` methods."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1065
msgid "To get a list of categories"
msgstr "カテゴリの配列を取得するには"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1086
msgid ""
"Where :meth:`value() <qgis.core.QgsRendererCategory.value>` is the value "
"used for discrimination between categories, :meth:`label() "
"<qgis.core.QgsRendererCategory.label>` is a text used for category "
"description and :meth:`symbol() <qgis.core.QgsRendererCategory.symbol>` "
"method returns the assigned symbol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1090
msgid ""
"The renderer usually stores also original symbol and color ramp which were "
"used for the classification: :meth:`sourceColorRamp() "
"<qgis.core.QgsCategorizedSymbolRenderer.sourceColorRamp>` and "
":meth:`sourceSymbol() <qgis.core.QgsCategorizedSymbolRenderer.sourceSymbol>`"
" methods."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1096
msgid "Graduated Symbol Renderer"
msgstr "段階シンボルレンダラー"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1098
msgid ""
"This renderer is very similar to the categorized symbol renderer described "
"above, but instead of one attribute value per class it works with ranges of "
"values and thus can be used only with numerical attributes."
msgstr ""
"このレンダラーは先ほど扱ったカテゴリ分けシンボルのレンダラーととても似ていますが、クラスごとの一つの属性値の代わりに領域の値として動作し、そのため数字の属性のみ使うことができます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1102
msgid "To find out more about ranges used in the renderer"
msgstr "レンダラーで使われている領域の多くの情報を見つけるには"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1125
msgid ""
"you can again use the :meth:`classAttribute "
"<qgis.core.QgsGraduatedSymbolRenderer.classAttribute>` (to find the "
"classification attribute name), :meth:`sourceSymbol "
"<qgis.core.QgsGraduatedSymbolRenderer.sourceSymbol>` and "
":meth:`sourceColorRamp "
"<qgis.core.QgsGraduatedSymbolRenderer.sourceColorRamp>` methods. "
"Additionally there is the :meth:`mode "
"<qgis.core.QgsGraduatedSymbolRenderer.mode>` method which determines how the"
" ranges were created: using equal intervals, quantiles or some other method."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1134
msgid ""
"If you wish to create your own graduated symbol renderer you can do so as "
"illustrated in the example snippet below (which creates a simple two class "
"arrangement)"
msgstr ""
"もし連続値シンボルレンダラーを作ろうとしているのであれば次のスニペットの例で書かれているようにします(これはシンプルな二つのクラスを作成するものを取り上げています)::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1178
msgid "Working with Symbols"
msgstr "シンボルの操作"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1180
msgid ""
"For representation of symbols, there is :class:`QgsSymbol "
"<qgis.core.QgsSymbol>` base class with three derived classes:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1183
msgid ""
":class:`QgsMarkerSymbol <qgis.core.QgsMarkerSymbol>` --- for point features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1184
msgid ":class:`QgsLineSymbol <qgis.core.QgsLineSymbol>` --- for line features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1185
msgid ""
":class:`QgsFillSymbol <qgis.core.QgsFillSymbol>` --- for polygon features"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1187
msgid ""
"**Every symbol consists of one or more symbol layers** (classes derived from"
" :class:`QgsSymbolLayer <qgis.core.QgsSymbolLayer>`). The symbol layers do "
"the actual rendering, the symbol class itself serves only as a container for"
" the symbol layers."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1191
msgid ""
"Having an instance of a symbol (e.g. from a renderer), it is possible to "
"explore it: the :meth:`type <qgis.core.QgsSymbol.type>` method says whether "
"it is a marker, line or fill symbol. There is a :meth:`dump "
"<qgis.core.QgsSymbol.dump>` method which returns a brief description of the "
"symbol. To get a list of symbol layers:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1208
msgid ""
"To find out symbol's color use :meth:`color <qgis.core.QgsSymbol.color>` "
"method and :meth:`setColor <qgis.core.QgsSymbol.setColor>` to change its "
"color. With marker symbols additionally you can query for the symbol size "
"and rotation with the :meth:`size <qgis.core.QgsMarkerSymbol.size>` and "
":meth:`angle <qgis.core.QgsMarkerSymbol.angle>` methods. For line symbols "
"the :meth:`width <qgis.core.QgsLineSymbol.width>` method returns the line "
"width."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1213
msgid "Size and width are in millimeters by default, angles are in degrees."
msgstr "サイズと幅は標準でミリメートルが使われ、角度は 度 が使われます。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1218
msgid "Working with Symbol Layers"
msgstr "シンボルレイヤーの操作"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1220
msgid ""
"As said before, symbol layers (subclasses of :class:`QgsSymbolLayer "
"<qgis.core.QgsSymbolLayer>`) determine the appearance of the features.  "
"There are several basic symbol layer classes for general use. It is possible"
" to implement new symbol layer types and thus arbitrarily customize how "
"features will be rendered. The :meth:`layerType() "
"<qgis.core.QgsSymbolLayer.layerType>` method uniquely identifies the symbol "
"layer class --- the basic and default ones are ``SimpleMarker``, "
"``SimpleLine`` and ``SimpleFill`` symbol layers types."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1227
msgid ""
"You can get a complete list of the types of symbol layers you can create for"
" a given symbol layer class with the following code:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1249
msgid ""
"The :class:`QgsSymbolLayerRegistry <qgis.core.QgsSymbolLayerRegistry>` class"
" manages a database of all available symbol layer types."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1252
msgid ""
"To access symbol layer data, use its :meth:`properties() "
"<qgis.core.QgsSymbolLayer.properties>` method that returns a key-value "
"dictionary of properties which determine the appearance. Each symbol layer "
"type has a specific set of properties that it uses. Additionally, there are "
"the generic methods :meth:`color <qgis.core.QgsSymbol.color>`, :meth:`size "
"<qgis.core.QgsMarkerSymbol.size>`, :meth:`angle "
"<qgis.core.QgsMarkerSymbol.angle>` and :meth:`width "
"<qgis.core.QgsLineSymbol.width>`, with their setter counterparts. Of course "
"size and angle are available only for marker symbol layers and width for "
"line symbol layers."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1264
msgid "Creating Custom Symbol Layer Types"
msgstr "カスタムシンボルレイヤータイプの作成"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1266
msgid ""
"Imagine you would like to customize the way how the data gets rendered. You "
"can create your own symbol layer class that will draw the features exactly "
"as you wish. Here is an example of a marker that draws red circles with "
"specified radius"
msgstr ""
"データをどうレンダリングするかをカスタマイズしたいと考えているとします。思うままに地物を描画する独自のシンボルレイヤークラスを作成できます。次の例は指定した半径で赤い円を描画するマーカーを示しています::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1306
msgid ""
"The :meth:`layerType <qgis.core.QgsSymbolLayer.layerType>` method determines"
" the name of the symbol layer; it has to be unique among all symbol layers. "
"The :meth:`properties <qgis.core.QgsSymbolLayer.properties>` method is used "
"for persistence of attributes. The :meth:`clone "
"<qgis.core.QgsSymbolLayer.clone>` method must return a copy of the symbol "
"layer with all attributes being exactly the same. Finally there are "
"rendering methods: :meth:`startRender "
"<qgis.core.QgsSymbolLayer.startRender>` is called before rendering the first"
" feature, :meth:`stopRender <qgis.core.QgsSymbolLayer.stopRender>` when the "
"rendering is done, and :meth:`renderPoint "
"<qgis.core.QgsMarkerSymbolLayer.renderPoint>` is called to do the rendering."
" The coordinates of the point(s) are already transformed to the output "
"coordinates."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1318
msgid ""
"For polylines and polygons the only difference would be in the rendering "
"method: you would use :meth:`renderPolyline "
"<qgis.core.QgsLineSymbolLayer.renderPolyline>` which receives a list of "
"lines, while :meth:`renderPolygon "
"<qgis.core.QgsFillSymbolLayer.renderPolygon>` receives a list of points on "
"the outer ring as the first parameter and a list of inner rings (or None) as"
" a second parameter."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1326
msgid ""
"Usually it is convenient to add a GUI for setting attributes of the symbol "
"layer type to allow users to customize the appearance: in case of our "
"example above we can let user set circle radius. The following code "
"implements such widget"
msgstr ""
"普通はユーザーに外観をカスタマイズさせるためにシンボルレイヤータイプの属性を設定するGUIを追加すると使いやすくなります: "
"上記の例であればユーザーは円の半径を設定できます。次のコードはそのようなウィジェットの実装となります::"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1364
msgid ""
"This widget can be embedded into the symbol properties dialog. When the "
"symbol layer type is selected in symbol properties dialog, it creates an "
"instance of the symbol layer and an instance of the symbol layer widget. "
"Then it calls the :meth:`setSymbolLayer "
"<qgis.gui.QgsSymbolLayerWidget.setSymbolLayer>` method to assign the symbol "
"layer to the widget. In that method the widget should update the UI to "
"reflect the attributes of the symbol layer. The :meth:`symbolLayer "
"<qgis.gui.QgsSymbolLayerWidget.symbolLayer>` method is used to retrieve the "
"symbol layer again by the properties dialog to use it for the symbol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1374
msgid ""
"On every change of attributes, the widget should emit the :any:`changed() "
"<qgis.gui.QgsSymbolLayerWidget.changed>` signal to let the properties dialog"
" update the symbol preview."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1378
msgid ""
"Now we are missing only the final glue: to make QGIS aware of these new "
"classes. This is done by adding the symbol layer to registry. It is possible"
" to use the symbol layer also without adding it to the registry, but some "
"functionality will not work: e.g. loading of project files with the custom "
"symbol layers or inability to edit the layer's attributes in GUI."
msgstr ""
"私達は最後につなげるところだけまだ扱っていません: QGIS "
"にこれらの新しいクラスを知らせる方法です。これはレジストリにシンボルレイヤーを追加すれば完了です。レジストリに追加しなくてもシンボルレイヤーを使うことはできますが、いくつかの機能が動かないでしょう:"
" 例えばカスタムシンボルレイヤーを使ってプロジェクトファイルを読み込んだり、GUIでレイヤーの属性を編集できないなど。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1384
msgid "We will have to create metadata for the symbol layer"
msgstr "シンボルレイヤーのメタデータを作る必要があるでしょう"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1401
msgid ""
"You should pass layer type (the same as returned by the layer) and symbol "
"type (marker/line/fill) to the constructor of the parent class. The "
":meth:`createSymbolLayer() "
"<qgis.core.QgsSymbolLayerAbstractMetadata.createSymbolLayer>` method takes "
"care of creating an instance of symbol layer with attributes specified in "
"the `props` dictionary. And there is the :meth:`createSymbolLayerWidget() "
"<qgis.core.QgsSymbolLayerAbstractMetadata.createSymbolLayerWidget>` method "
"which returns the settings widget for this symbol layer type."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1409
msgid ""
"The last step is to add this symbol layer to the registry --- and we are "
"done."
msgstr "最後にこのシンボルレイヤーをレジストリに追加します --- これで完了です。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1415
msgid "Creating Custom Renderers"
msgstr "カスタムレンダラーの作成"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1417
msgid ""
"It might be useful to create a new renderer implementation if you would like"
" to customize the rules how to select symbols for rendering of features. "
"Some use cases where you would want to do it: symbol is determined from a "
"combination of fields, size of symbols changes depending on current scale "
"etc."
msgstr ""
"もし地物をレンダリングするためのシンボルをどう選択するかをカスタマイズしたいのであれば、新しいレンダラーの実装を作ると便利かもしれません。いくつかのユースケースとしてこんなことをしたいのかもしれません:"
" フィールドの組み合わせからシンボルを決定する、現在の縮尺に合わせてシンボルのサイズを変更するなどなど。"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1422
msgid ""
"The following code shows a simple custom renderer that creates two marker "
"symbols and chooses randomly one of them for every feature"
msgstr "次のコードは二つのマーカーシンボルを作成して全ての地物からランダムに一つ選ぶ簡単なカスタムレンダラーです"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1458
msgid ""
"The constructor of the parent :class:`QgsFeatureRenderer "
"<qgis.core.QgsFeatureRenderer>` class needs a renderer name (which has to be"
" unique among renderers). The :meth:`symbolForFeature "
"<qgis.core.QgsFeatureRenderer.symbolForFeature>` method is the one that "
"decides what symbol will be used for a particular feature. "
":meth:`startRender <qgis.core.QgsFeatureRenderer.startRender>` and "
":meth:`stopRender <qgis.core.QgsFeatureRenderer.stopRender>` take care of "
"initialization/finalization of symbol rendering. The :meth:`usedAttributes "
"<qgis.core.QgsFeatureRenderer.usedAttributes>` method can return a list of "
"field names that the renderer expects to be present. Finally, the "
":meth:`clone <qgis.core.QgsFeatureRenderer.clone>` method should return a "
"copy of the renderer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1469
msgid ""
"Like with symbol layers, it is possible to attach a GUI for configuration of"
" the renderer. It has to be derived from :class:`QgsRendererWidget "
"<qgis.gui.QgsRendererWidget>`. The following sample code creates a button "
"that allows the user to set the first symbol"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1503
msgid ""
"The constructor receives instances of the active layer "
"(:class:`QgsVectorLayer <qgis.core.QgsVectorLayer>`), the global style "
"(:class:`QgsStyle <qgis.core.QgsStyle>`) and the current renderer. If there "
"is no renderer or the renderer has different type, it will be replaced with "
"our new renderer, otherwise we will use the current renderer (which has "
"already the type we need). The widget contents should be updated to show "
"current state of the renderer. When the renderer dialog is accepted, the "
"widget's :meth:`renderer <qgis.gui.QgsRendererWidget.renderer>` method is "
"called to get the current renderer --- it will be assigned to the layer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1513
msgid ""
"The last missing bit is the renderer metadata and registration in registry, "
"otherwise loading of layers with the renderer will not work and user will "
"not be able to select it from the list of renderers. Let us finish our "
"RandomRenderer example"
msgstr ""
"最後のちょっとした作業はレンダラーのメタデータとレジストリへの登録です。これらをしないとレンダラーのレイヤーの読み込みは動かず、ユーザーはレンダラーのリストから選択できないでしょう。では、私達の"
" RandomRenderer の例を終わらせましょう"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1539
msgid ""
"Similarly as with symbol layers, abstract metadata constructor awaits "
"renderer name, name visible for users and optionally name of renderer's "
"icon. The :meth:`createRenderer "
"<qgis.core.QgsRendererAbstractMetadata.createRenderer>` method passes a "
":class:`QDomElement` instance that can be used to restore the renderer's "
"state from the DOM tree. The :meth:`createRendererWidget "
"<qgis.core.QgsRendererAbstractMetadata.createRendererWidget>` method creates"
" the configuration widget. It does not have to be present or can return "
"``None`` if the renderer does not come with GUI."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1548
msgid ""
"To associate an icon with the renderer you can assign it in the "
":class:`QgsRendererAbstractMetadata <qgis.core.QgsRendererAbstractMetadata>`"
" constructor as a third (optional) argument --- the base class constructor "
"in the RandomRendererMetadata :func:`__init__` function becomes"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1562
msgid ""
"The icon can also be associated at any later time using the :meth:`setIcon "
"<qgis.core.QgsRendererAbstractMetadata.setIcon>` method of the metadata "
"class. The icon can be loaded from a file (as shown above) or can be loaded "
"from a `Qt resource <https://doc.qt.io/qt-5/resources.html>`_ (PyQt5 "
"includes .qrc compiler for Python)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1570
msgid "Further Topics"
msgstr "より詳しいトピック"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1573
msgid "**TODO:**"
msgstr "**TODO:**"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1575
msgid "creating/modifying symbols"
msgstr "シンボルの作成や修正"

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1576
msgid "working with style (:class:`QgsStyle <qgis.core.QgsStyle>`)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1577
msgid ""
"working with color ramps (:class:`QgsColorRamp <qgis.core.QgsColorRamp>`)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/vector.rst:1578
msgid "exploring symbol layer and renderer registries"
msgstr "シンボルレイヤーとレンダラーのレジストリを調べる方法"
