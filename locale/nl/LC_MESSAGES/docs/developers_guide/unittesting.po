# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGIS Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Richard Duivenvoorde <richard@duif.net>, 2020
# Dick Groskamp, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-10 11:07+0200\n"
"PO-Revision-Date: 2020-03-16 19:24+0000\n"
"Last-Translator: Dick Groskamp, 2020\n"
"Language-Team: Dutch (https://www.transifex.com/qgis/teams/6144/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../docs/developers_guide/unittesting.rst:6
msgid "Unit Testing"
msgstr "Testen van eenheden"

#: ../../docs/developers_guide/unittesting.rst:11
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement to "
"qgis_core, and we will extend this requirement to other parts of the code "
"base once people are familiar with the procedures for unit testing explained"
" in the sections that follow."
msgstr ""
"Vanaf november 2007 vereisen we dat alle nieuwe mogelijkheden die in master "
"gaan worden vergezeld door een test van eenheden. Initieel hadden we deze "
"eis beperkt tot qgis_core, en we zullen deze eis uitbreiden naar andere "
"delen van de codebasis als mensen eenmaal bekend zijn met de procedures voor"
" het testen van eenheden, uitgelegd in de gedeelten die volgen."

#: ../../docs/developers_guide/unittesting.rst:19
msgid "The QGIS testing framework - an overview"
msgstr "Het test framework  voor QGIS - een overzicht"

#: ../../docs/developers_guide/unittesting.rst:21
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt testing "
"library) and CTest (a framework for compiling and running tests as part of "
"the CMake build process). Lets take an overview of the process before we "
"delve into the details:"
msgstr ""
"Testen van eenheden wordt uitgevoerd met behulp van een combinatie van "
"QTestLib (de testbibliotheek van Qt) en CTest (een framework voor het "
"compileren en uitvoeren van testen als deel van het CMake buildproces). "
"Laten we eens naar een overzicht van het proces kijken, voordat we dieper op"
" de details ingaan:"

#: ../../docs/developers_guide/unittesting.rst:26
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written yet "
"when you start building your tests, and then as you implement your code you "
"can immediately validate each new functional part you add with your test. In"
" practice you will probably need to write tests for pre-existing code in "
"QGIS since we are starting with a testing framework well after much "
"application logic has already been implemented."
msgstr ""
"Er is enige code die u wilt testen, bijv. een klasse of functie. Extreme "
"experts van programmeren stellen voor dat de code nog niet zou moeten zijn "
"geschreven wanneer u begint met het bouwen van uw tests, en dan, als u uw "
"code implementeert, kunt u onmiddellijk elk nieuw functionele gedeelte dat u"
" toevoegt kunnen valideren met uw test. In de praktijk dient u "
"waarschijnlijk testen te schrijven voor reeds bestaande code in QGIS omdat "
"we met een test framework beginnen ruim nadat veel logica voor de toepassing"
" al is geïmplementeerd."

#: ../../docs/developers_guide/unittesting.rst:34
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically a "
"client that creates an instance of a class and calls some methods on that "
"class. It will check the return from each method to make sure it matches the"
" expected value. If any one of the calls fails, the unit will fail."
msgstr ""
"U maakt een test voor eenheden. Dit gebeurt onder ``<QGIS Source "
"Dir>/tests/src/core`` in het geval van de core lib. De test is in de basis "
"een cliënt die een instantie van ene klasse maakt en enkele methoden van die"
" klasse aanroept. Het zal de teruggave voor elke methoden controleren om er "
"voor te zorgen dat het overeenkomt met de verwachte waarde. Als één van de "
"aanroepen mislukt, zal de eenheid mislukken."

#: ../../docs/developers_guide/unittesting.rst:40
msgid ""
"You include QtTestLib macros in your test class. This macro is processed by "
"the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr ""
"U neemt macro's van QtTestLib op in uw testklasse. Deze macro wordt verwerkt"
" door de Qt meta object compiler (moc) en breidt uw testklasse uit naar een "
"uitvoerbare toepassing."

#: ../../docs/developers_guide/unittesting.rst:44
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will "
"build your test."
msgstr ""
"U voegt een gedeelte toe aan CMakeLists.txt in uw map met testen die uw test"
" zal bouwen."

#: ../../docs/developers_guide/unittesting.rst:47
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. This "
"will ensure your tests actually get compiled when you type make."
msgstr ""
"Zorg er voor dat u ``ENABLE_TESTING`` heeft ingeschakeld in ccmake / "
"cmakesetup. Dat zal er voor zorgen dat uw testen in feite worden "
"gecompileerd als u make typt."

#: ../../docs/developers_guide/unittesting.rst:50
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if your"
" test is data driven (e.g. needs to load a shapefile). These test data "
"should be as small as possible and wherever possible you should use the "
"existing datasets already there. Your tests should never modify this data in"
" situ, but rather make a temporary copy somewhere if needed."
msgstr ""
"U voegt optioneel testgegevens toe aan ``<QGIS Source Dir>/tests/testdata`` "
"als uw test aangedreven wordt door gegevens (bijv. dient een shapefile te "
"laden). Deze testgegevens zouden zo klein mogelijk moeten zijn en waar "
"mogelijk zou u de reeds daar aanwezige gegevens moeten gebruiken. Uw testen "
"zouden nooit die gegevens in situ moeten aanpassen, maar in plaats daarvan "
"ergens een tijdelijke kopie moeten maken, indien nodig."

#: ../../docs/developers_guide/unittesting.rst:56
msgid ""
"You compile your sources and install. Do this using normal ``make && (sudo)"
"  make install`` procedure."
msgstr ""
"U compileert uw bronnen en installeert. Doe dit met behulp van de normale "
"procedure ``make && (sudo)  make install``."

#: ../../docs/developers_guide/unittesting.rst:59
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though we will explain other approaches "
"that offer more fine grained control over running tests."
msgstr ""
"U voert uw testen uit. Dit wordt normaal gesproken eenvoudig gedaan door "
"``make test``  te doen na de stap ``make install``, hoewel we wel andere "
"benaderingen uitleggen die meer fijnmazige controle over het uitvoeren van "
"testen bieden."

#: ../../docs/developers_guide/unittesting.rst:64
msgid ""
"Right with that overview in mind, we will delve into a bit of detail. We've "
"already done much of the configuration for you in CMake and other places in "
"the source tree so all you need to do are the easy bits - writing unit "
"tests!"
msgstr ""
"Met dat overzicht in gedachten zullen we een beetje meer ingaan op de "
"details. We hebben al veel van de configuratie voor u gedaan in CMake en op "
"andere plaatsen in de boom van de bron, dus alles wat u nog zou moeten doen "
"zijn de eenvoudige gedeelten - testen voor eenheden schrijven!"

#: ../../docs/developers_guide/unittesting.rst:70
msgid "Creating a unit test"
msgstr "Een test voor eenheden maken"

#: ../../docs/developers_guide/unittesting.rst:72
msgid ""
"Creating a unit test is easy - typically you will do this by just creating a"
" single :file:`.cpp` file (no :file:`.h` file is used) and implement all "
"your test methods as public methods that return void. We'll use a simple "
"test class for ``QgsRasterLayer`` throughout the section that follows to "
"illustrate. By convention we will name our test with the same name as the "
"class they are testing but prefixed with 'Test'. So our test implementation "
"goes in a file called :file:`testqgsrasterlayer.cpp` and the class itself "
"will be ``TestQgsRasterLayer``. First we add our standard copyright banner:"
msgstr ""
"Het maken van een test voor eenheden is eenvoudig - gewoonlijk zult u dit "
"doen door één enkel :file:`.cpp`-bestand te maken (er wordt geen "
":file:`.h`-bestand gebruikt) en implementeer al uw testmethoden als publieke"
" methoden die void teruggeven. We gebruiken, ter illustratie, een eenvoudige"
" testklasse voor ``QgsRasterLayer`` in het gedeelte dat hierop volgt. "
"Volgens conventie zullen we onze test dezelfde naam geven als de klasse die "
"getest wordt, maar met het voorvoegsel 'Test'. Dus onze test-implementatie "
"gaat in een bestand genaamd :file:`testqgsrasterlayer.cpp` en de klasse zelf"
" zal zijn ``TestQgsRasterLayer``. Eerst voegen we onze standaard banner voor"
" auteursrechten toe:"

#: ../../docs/developers_guide/unittesting.rst:98
msgid ""
"Next we start our includes needed for the tests we plan to run. There is one"
" special include all tests should have:"
msgstr ""
"Vervolgens beginnen we met het vermelden van onze includes die nodig zijn "
"voor de testen die we willen uitvoeren. Er is één speciale include die  alle"
" testen zouden moeten hebben:"

#: ../../docs/developers_guide/unittesting.rst:105
msgid ""
"Beyond that you just continue implementing your class as per normal, pulling"
" in whatever headers you may need:"
msgstr ""
"Naast dat u gewoon doorgaat met het implementeren van uw klasse zoals "
"gewoonlijk, er headers in opnemend die u nodig zou kunnen hebben:"

#: ../../docs/developers_guide/unittesting.rst:123
msgid ""
"Since we are combining both class declaration and implementation in a single"
" file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in "
"the generated Doxygen documentation. After that comes a short description of"
" the unit test and the class must inherit from QObject and include the "
"Q_OBJECT macro."
msgstr ""
"Omdat we zowel de declaratie van de klasse als de implementatie in één enkel"
" bestand hebben, is het volgende de declaratie van de klasse. We beginnen "
"met onze documentatie voor doxygen. Elke test zou juist gedocumenteerd "
"moeten zijn. We gebruiken het doxygen ingroup directive zodat alle UnitTests"
" als een module verschijnen in de gegenereerde documentatie voor Doxygen. "
"Daarna komt ene korte beschrijving van de test van de eenheid en de klasse "
"moet erven van QObject en de macro Q_OBJECT bevatten."

#: ../../docs/developers_guide/unittesting.rst:140
msgid ""
"All our test methods are implemented as private slots. The QtTest framework "
"will sequentially call each private slot method in the test class. There are"
" four 'special' methods which if implemented will be called at the start of "
"the unit test (``initTestCase``), at the end of the unit test "
"(``cleanupTestCase``). Before each test method is called, the ``init()`` "
"method will be called and after each test method is called the ``cleanup()``"
" method is called. These methods are handy in that they allow you to "
"allocate and cleanup resources prior to running each test, and the test unit"
" as a whole."
msgstr ""
"Alle onze testmethoden worden geïmplementeerd als private slots. Het "
"framework QtTest zal op volgorde vervolgens elke methode private slot in de "
"testklasse aanroepen. Er zijn vier 'speciale' methoden die, indien "
"geïmplementeerd, zullen worden aangeroepen aan het begin van de test van de "
"eenheid (``initTestCase``), aan het einde van de test van de eenheid "
"(``cleanupTestCase``). Vóórdat elke testmethode wordt aangeroepen, wordt de "
"methode ``init()`` aangeroepen en na elke testmethode wordt de methode "
"``cleanup()`` aangeroepen. Deze methoden zij handig omdat zij u in staat "
"stellen bronnen toe te wijzen en op te schonen, voorafgaande aan elke test, "
"en de test van de eenheid als geheel."

#: ../../docs/developers_guide/unittesting.rst:161
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. We "
"are implementing two methods here which illustrate two types of testing."
msgstr ""
"Dan komen uw testmethoden, die geen van allen parameters zouden moeten "
"hebben en void zouden moeten teruggeven. De methoden zullen worden "
"aangeroepen in de volgorde van hun declaratie. We implementeren hier twee "
"methoden die twee typen van testen illustreren."

#: ../../docs/developers_guide/unittesting.rst:165
msgid ""
"In the first case we want to generally test if the various parts of the "
"class are working, We can use a functional testing approach. Once again, "
"extreme programmers would advocate writing these tests before implementing "
"the class. Then as you work your way through your class implementation you "
"iteratively run your unit tests. More and more test functions should "
"complete successfully as your class implementation work progresses, and when"
" the whole unit test passes, your new class is done and is now complete with"
" a repeatable way to validate it."
msgstr ""
"In het eerste geval willen we in het algemeen testen of de verschillende "
"delen van de klasse werken. We kunnen een functionele benadering voor het "
"testen gebruiken. Nogmaals, zeer ervaren programmeurs zouden er misschien "
"voor pleiten deze testen te implementeren vóór het implementeren van de "
"klasse. Als u zich dan door uw implementatie van de klasse heen werkt, voert"
" u achtereenvolgens uw testen van de eenheid uit. Meer en meer testfuncties "
"zouden met succes moeten voltooien als het werk aan uw implementatie van de "
"klasse vordert, en wanneer de gehele test van de eenheid slaagt, is uw "
"nieuwe klasse klaar en is nu compleet met een te herhalen manier om hem te "
"valideren."

#: ../../docs/developers_guide/unittesting.rst:173
msgid ""
"Typically your unit tests would only cover the public API of your class, and"
" normally you do not need to write tests for accessors and mutators. If it "
"should happen that an accessor or mutator is not working as expected you "
"would normally implement a :ref:`regression test <regression_test>` to check"
" for this."
msgstr ""
"Gewoonlijk zouden uw testen voor eenheden alleen de public API van uw klasse"
" behandelen, en normaal gesproken behoeft u geen testen te schrijven voor "
"accessors en mutators. Als het zou gebeuren dat een acccessor of mutator "
"niet werkt zoals u verwacht, zou u normaal gesproken een :ref:`regressietest"
" <regression_test>` implementeren om hierop te controleren."

#: ../../docs/developers_guide/unittesting.rst:193
msgid "Implementing a regression test"
msgstr "Een regressietest implementeren "

#: ../../docs/developers_guide/unittesting.rst:195
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example:"
msgstr ""
"Vervolgens implementeren we onze regressietesten. Regressietesten zouden "
"moeten worden geïmplementeerd om de voorwaarden van een bepaald probleem te "
"kunnen reproduceren. Bijvoorbeeld:"

#: ../../docs/developers_guide/unittesting.rst:198
msgid ""
"We received a report by email that the cell count by rasters was off by 1, "
"throwing off all the statistics for the raster bands."
msgstr ""
"We ontvingen per e-mail een rapport dat de telling voor cellen in een er "
"steeds 1, naast zat, wat alle statistieken voor de rasterbanden "
"onbetrouwbaar maakte."

#: ../../docs/developers_guide/unittesting.rst:200
msgid ""
"We opened a bug report (`ticket #832 <https://issues.qgis.org/issues/832>`_)"
msgstr ""
"We openden een rapport voor het probleem (`ticket #832 "
"<https://issues.qgis.org/issues/832>`_)"

#: ../../docs/developers_guide/unittesting.rst:201
msgid ""
"We created a regression test that replicated the bug using a small test "
"dataset (a 10x10 raster)."
msgstr ""
"We maakten een regressietest die het probleem reproduceerde met behulp van "
"een kleine test-gegevensset (een raster van 10x10)."

#: ../../docs/developers_guide/unittesting.rst:203
msgid ""
"We ran the test, verifying that it did indeed fail (the cell count was 99 "
"instead of 100)."
msgstr ""
"We voerden de test uit en verifieerden inderdaad dat hij faalde (de telling "
"van de cellen kwam uit op 99 in plaats van op 100)."

#: ../../docs/developers_guide/unittesting.rst:205
msgid ""
"Then we went to fix the bug and reran the unit test and the regression test "
"passed. We committed the regression test along with the bug fix. Now if "
"anybody breakes this in the source code again in the future, we can "
"immediately identify that the code has regressed."
msgstr ""
"Hierna repareerden we het probleem en voerden de eenheidstest opnieuw uit en"
" de regressietest werd met succes uitgevoerd. We dienden de regressietest "
"samen in met de oplossing van het probleem. Als nu iemand in de toekomst de "
"broncode opnieuw breekt, kunnen we onmiddellijk identificeren dat de code "
"achteruit is gegaan."

#: ../../docs/developers_guide/unittesting.rst:210
msgid ""
"Better yet, before committing any changes in the future, running our tests "
"will ensure our changes don't have unexpected side effects - like breaking "
"existing functionality."
msgstr ""
"Beter nog, voordat wijzigingen in de toekomst worden ingediend, zou het "
"uitvoeren van onze testen er voor zorgen dat dat onze wijzigingen geen "
"onverwachte neveneffecten hebben - zoals het breken van bestaande "
"functionaliteit."

#: ../../docs/developers_guide/unittesting.rst:214
msgid ""
"There is one more benefit to regression tests - they can save you time. If "
"you ever fixed a bug that involved making changes to the source, and then "
"running the application and performing a series of convoluted steps to "
"replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr ""
"Er is nog een voordeel van regressietests - zij kunnen u tijd besparen. Als "
"u ooit een bug oploste die mede bestond uit het maken van wijzigingen aan de"
" bron, en daarna de toepassing uitvoerde en een reeks gecompliceerde stappen"
" uitvoerde om het probleem te repliceren, zal het onmiddellijk duidelijk "
"zijn dat het eenvoudigweg implementeren van uw regressietest vóór het "
"oplossen van het probleem het automatiseren van het testen voor oplossingen "
"voor het probleem op een efficiënte manier laat uitvoeren."

#: ../../docs/developers_guide/unittesting.rst:221
msgid ""
"To implement your regression test, you should follow the naming convention "
"of **regression<TicketID>** for your test functions. If no ticket exists for"
" the regression, you should create one first. Using this approach allows the"
" person running a failed regression test easily go and find out more "
"information."
msgstr ""
"U zou, voor het implementeren van uw regressietest, de conventie voor namen"
"  van **regressie<TicketID>** moeten volgen voor uw testfuncties. Als er "
"geen ticket bestaat voor de regressie zou u er eerst een moeten maken. Het "
"gebruiken van deze benadering stelt de persoon die een mislukte "
"regressietest uitvoerde in staat eenvoudig door te gaan en meer informatie "
"te zoeken."

#: ../../docs/developers_guide/unittesting.rst:240
msgid ""
"Finally in your test class declaration you can declare privately any data "
"members and helper methods your unit test may need. In our case we will "
"declare a ``QgsRasterLayer *`` which can be used by any of our test methods."
" The raster layer will be created in the ``initTestCase()`` function which "
"is run before any other tests, and then destroyed using "
"``cleanupTestCase()`` which is run after all tests. By declaring helper "
"methods (which may be called by various test functions) privately, you can "
"ensure that they won't be automatically run by the QTest executable that is "
"created when we compile our test."
msgstr ""
"Tenslotte kunt u in uw declaratie van de testklasse nog persoonlijk enkele "
"gegevensleden en hulpmethoden declareren die uw test voor eenheid nodig zou "
"kunnen hebben. In ons geval zal ik een ``QgsRasterLayer *``  declareren die "
"kan worden gebruikt door elk van onze testmethoden. De rasterlaag zal worden"
" gemaakt in de functie ``initTestCase()`` die wordt uitgevoerd vóór enige "
"andere test, en dan worden vernietigd met behulp van ``cleanupTestCase()`` "
"die na elke test wordt uitgevoerd. Door het persoonlijk declareren van "
"hulpmethoden (die aangeroepen kunnen worden door verscheidene testfuncties),"
" kunt u er voor zorgen dat zij niet automatisch zullen worden uitgevoerd "
"door de uitvoerbare QTest die wordt gemaakt wanneer we onze test compileren."

#: ../../docs/developers_guide/unittesting.rst:257
msgid ""
"That ends our class declaration. The implementation is simply inlined in the"
" same file lower down. First our init and cleanup functions:"
msgstr ""
"Dat beëindigt onze declaratie van de klasse. De implementatie is "
"eenvoudigweg opgenomen in hetzelfde bestand hieronder. Eerst onze functies "
"init en cleanup:"

#: ../../docs/developers_guide/unittesting.rst:290
msgid "The above init function illustrates a couple of interesting things."
msgstr "Bovenstaande functie init illustreert een aantal interessante dingen."

#: ../../docs/developers_guide/unittesting.rst:292
msgid ""
"We needed to manually set the QGIS application data path so that resources "
"such as :file:`srs.db` can be found properly."
msgstr ""
"We moesten handmatig het gegevenspad naar de toepassing van QGIS instellen "
"zodat bronnen zoals :file:`srs.db` op de juiste manier worden gevonden."

#: ../../docs/developers_guide/unittesting.rst:294
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the :file:`tenbytenraster.asc` file. This was achieved by"
" using the compiler define ``TEST_DATA_PATH``. The define is created in the "
"``CMakeLists.txt`` configuration file under :file:`<QGIS Source "
"Root>/tests/CMakeLists.txt` and is available to all QGIS unit tests. If you "
"need test data for your test, commit it under :file:`<QGIS Source "
"Root>/tests/testdata`. You should only commit very small datasets here. If "
"your test needs to modify the test data, it should make a copy of it first."
msgstr ""
"Ten tweede is dat een door gegevens gedreven test dus moesten we een manier "
"verschaffen om generiek het bestand :file:`tenbytenraster.asc` te "
"lokaliseren. Dit werd bereikt door met behulp van de compiler het "
"``TEST_DATA_PATH`` te definiëren. De definitie wordt gemaakt in het "
"configuratiebestand ``CMakeLists.txt`` onder :file:`<QGIS Source "
"Root>/tests/CMakeLists.txt` en is beschikbaar voor alle testen van eenheden "
"in QGIS. Als u gegevens voor uw test dient te testen, plaats het dan onder "
":file:`<QGIS Source Root>/tests/testdata`. U zou hier slechts hele kleine "
"gegevenssets moeten plaatsen. Als uw test de testgegevens dient aan te "
"passen zou het daar eerst een kopie van moeten maken."

#: ../../docs/developers_guide/unittesting.rst:304
msgid ""
"Qt also provides some other interesting mechanisms for data driven testing, "
"so if you are interested to know more on the topic, consult the Qt "
"documentation."
msgstr ""
"Qt verschaft ook enige andere interessante mechanismen voor gegevens "
"gedreven testen, als u dus meer wilt weten over dit onderwerp, consulteer "
"dan de documentatie van Qt."

#: ../../docs/developers_guide/unittesting.rst:308
msgid ""
"Next lets look at our functional test. The ``isValid()`` test simply checks "
"the raster layer was correctly loaded in the initTestCase. QVERIFY is a Qt "
"macro that you can use to evaluate a test condition. There are a few other "
"use macros Qt provide for use in your tests including:"
msgstr ""
"Laten we vervolgens eens kijken naar onze functionele test. De test "
"``isValid()`` controleert eenvoudigweg of de  rasterlaag juist werd geladen "
"in de initTestCase. QVERIFY is een macro van Qt die u kunt gebruiken om de "
"de voorwaarde van de test te evalueren. er zijn ook nog ene paar andere "
"macro's die Qt verschaft om te gebruiken bij uw testen, inclusief:"

#: ../../docs/developers_guide/unittesting.rst:313
msgid "QCOMPARE ( *actual, expected* )"
msgstr "QCOMPARE ( *actual, expected* )"

#: ../../docs/developers_guide/unittesting.rst:314
msgid "QEXPECT_FAIL ( *dataIndex, comment, mode* )"
msgstr "QEXPECT_FAIL ( *dataIndex, comment, mode* )"

#: ../../docs/developers_guide/unittesting.rst:315
msgid "QFAIL ( *message* )"
msgstr "QFAIL ( *message* )"

#: ../../docs/developers_guide/unittesting.rst:316
msgid "QFETCH ( *type, name* )"
msgstr "QFETCH ( *type, name* )"

#: ../../docs/developers_guide/unittesting.rst:317
msgid "QSKIP ( *description, mode* )"
msgstr "QSKIP ( *description, mode* )"

#: ../../docs/developers_guide/unittesting.rst:318
msgid "QTEST ( *actual, testElement* )"
msgstr "QTEST ( *actual, testElement* )"

#: ../../docs/developers_guide/unittesting.rst:319
msgid "QTEST_APPLESS_MAIN ( *TestClass* )"
msgstr "QTEST_APPLESS_MAIN ( *TestClass* )"

#: ../../docs/developers_guide/unittesting.rst:320
msgid "QTEST_MAIN ( *TestClass* )"
msgstr "QTEST_MAIN ( *TestClass* )"

#: ../../docs/developers_guide/unittesting.rst:321
msgid "QTEST_NOOP_MAIN ()"
msgstr "QTEST_NOOP_MAIN ()"

#: ../../docs/developers_guide/unittesting.rst:322
msgid "QVERIFY2 ( *condition, message* )"
msgstr "QVERIFY2 ( *condition, message* )"

#: ../../docs/developers_guide/unittesting.rst:323
msgid "QVERIFY ( *condition* )"
msgstr "QVERIFY ( *condition* )"

#: ../../docs/developers_guide/unittesting.rst:324
msgid "QWARN ( *message* )"
msgstr "QWARN ( *message* )"

#: ../../docs/developers_guide/unittesting.rst:326
msgid ""
"Some of these macros are useful only when using the Qt framework for data "
"driven testing (see the Qt docs for more detail)."
msgstr ""
"Enkele van deze macro's zijn alleen nuttig bij het gebruiken van het Qt "
"framework voor gegevens gedreven testen (bekijk de documentatie van Qt voor "
"meer details)."

#: ../../docs/developers_guide/unittesting.rst:336
msgid ""
"Normally your functional tests would cover all the range of functionality of"
" your classes public API where feasible. With our functional tests out the "
"way, we can look at our regression test example."
msgstr ""
"Normaal gesproken zouden uw functionele testen het gehele bereik van de "
"functionaliteit behandelen van uw klassen voor de public API waar mogelijk. "
"met onze functionele testen uit de weg kunnen we kijken naar het voorbeeld "
"van onze regressietest."

#: ../../docs/developers_guide/unittesting.rst:340
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test is"
" simply a matter of using QVERIFY to check that the cell count meets the "
"expected value:"
msgstr ""
"Omdat het probleem in bug #832 een rapport is over een  foutieve telling van"
" cellen, is het schrijven van onze test eenvoudigweg een geval van QVERIFY "
"gebruiken om te controleren of de telling van de cellen voldoet aan de "
"verwachte waarde:"

#: ../../docs/developers_guide/unittesting.rst:355
msgid ""
"With all the unit test functions implemented, there's one final thing we "
"need to add to our test class:"
msgstr ""
"Met alle functies voor de test van de eenheid geïmplementeerd, is er één "
"laatste ding dat we moeten doen om onze testklasse toe te voegen:"

#: ../../docs/developers_guide/unittesting.rst:363
msgid ""
"The purpose of these two lines is to signal to Qt's moc that this is a "
"QtTest (it will generate a main method that in turn calls each test "
"function. The last line is the include for the MOC generated sources. You "
"should replace ``testqgsrasterlayer`` with the name of your class in lower "
"case."
msgstr ""
"Het doel van deze twee regels is om een signaal af te geven naar Qt's moc "
"dat dit een QtTest is (het zal een hoofdmethode genereren die op zijn beurt "
"elke testfunctie aanroept. De laatste regel is de include voor de door MOC "
"gegenereerde bronnen. U zou ``testqgsrasterlayer`` moeten vervangen door de "
"naam van uw klasse in kleine letters."

#: ../../docs/developers_guide/unittesting.rst:369
msgid "Comparing images for rendering tests"
msgstr "Afbeeldingen vergelijken voor testen van renderen"

#: ../../docs/developers_guide/unittesting.rst:371
msgid ""
"Rendering images on different environments can produce subtle differences "
"due to platform-specific implementations (e.g. different font rendering and "
"antialiasing algorithms), to the fonts available on the system and for other"
" obscure reasons."
msgstr ""
"Renderen van afbeeldingen op verschillende omgevingen kan subtiele "
"verschillen produceren wegens platform-specifieke implementaties (bijv. "
"verschillend renderen van lettertypen en algoritmen voor antialiasing), voor"
" de beschikbare lettertypen op het systeem en om andere onduidelijke "
"redenen."

#: ../../docs/developers_guide/unittesting.rst:375
msgid ""
"When a rendering test runs on Travis and fails, look for the dash link at "
"the very bottom of the Travis log. This link will take you to a cdash page "
"where you can see the rendered vs expected images, along with a "
"\"difference\" image which highlights in red any pixels which did not match "
"the reference image."
msgstr ""
"Wanneer een test voor renderen wordt uitgevoerd op Travis en mislukt, zoek "
"dan naar de link met het streepje aan de uiterste onderzijde van het log van"
" Travis. Deze link zal u meenemen naar een pagina van cdash, waar u de "
"gerenderde vs verwachte afbeeldingen kunt zien, naast een afbeeldingen met "
"\"verschillen\" die in rood pixels accentueert die niet overeen kwamen met "
"de afbeelding waarnaar verwezen werd."

#: ../../docs/developers_guide/unittesting.rst:380
msgid ""
"The QGIS unit test system has support for adding \"mask\" images, which are "
"used to indicate when a rendered image may differ from the reference image. "
"A mask image is an image (with the same name as the reference image, but "
"including a **_mask.png** suffix), and should be the same dimensions as the "
"reference image. In a mask image the pixel values indicate how much that "
"individual pixel can differ from the reference image, so a black pixel "
"indicates that the pixel in the rendered image must exactly match the same "
"pixel in the reference image. A pixel with RGB 2, 2, 2 means that the "
"rendered image can vary by up to 2 in its RGB values from the reference "
"image, and a fully white pixel (255, 255, 255) means that the pixel is "
"effectively ignored when comparing the expected and rendered images."
msgstr ""
"Het systeem voor het testen van eenheden van QGIS heeft ondersteuning voor "
"het toevoegen van \"masker\"afbeeldingen, die worden gebruikt om aan te "
"geven wanneer een gerenderde afbeelding af zou kunnen wijken van de "
"afbeelding waarnaar verwezen wordt. Een maskerafbeelding is een afbeelding "
"(met dezelfde naam en als de afbeelding waarnaar verwezen wordt, maar "
"inclusief het achtervoegsel **_mask.png**), en zou van dezelfde dimensies "
"moeten zijn als de afbeelding waarnaar verwezen wordt. In een "
"maskerafbeelding geven de pixelwaarden aan hoeveel die individuele pixel mag"
" afwijken van de afbeelding waarnaar verwezen wordt, dus een zwarte pixel "
"geeft aan dat de pixel in de gerenderde afbeelding moet exact overeenkomen "
"met dezelfde pixel in de afbeelding waarnaar verwezen wordt. Een pixel met "
"RGB 2, 2, 2 betekent dat de gerenderde afbeelding tot maximaal 2 kan "
"variëren in zijn waarden voor RGB in de afbeelding waarnaar verwezen wordt, "
"en een volledig witte pixel (255, 255, 255) betekent dat de pixel effectief "
"wordt genegeerd bij het vergelijken van de verwachte en gerenderde "
"afbeeldingen."

#: ../../docs/developers_guide/unittesting.rst:392
msgid ""
"A utility script to generate mask images is available as "
"``scripts/generate_test_mask_image.py``. This script is used by passing it "
"the path of a reference image (e.g. "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``)"
" and the path to your rendered image."
msgstr ""
"Een utility-script om maskerafbeeldingen te genereren is beschikbaar als "
"``scripts/generate_test_mask_image.py``. Dit script wordt gebruikt door het "
"pad van een afbeelding waarnaar verwezen moet worden (bijv. "
"``tests/testdata/control_images/annotations/expected_annotation_fillstyle/expected_annotation_fillstyle.png``)"
" en het pad naar uw gerenderde afbeelding door te geven."

#: ../../docs/developers_guide/unittesting.rst:397
msgid "E.g."
msgstr "Bijv."

#: ../../docs/developers_guide/unittesting.rst:403
msgid ""
"You can shortcut the path to the reference image by passing a partial part "
"of the test name instead, e.g."
msgstr ""
"U kunt het pad naar de afbeelding waarnaar verwezen moet worden verkorten "
"door in plaats daarvan een gedeelte van de testnaam door te geven, bijv."

#: ../../docs/developers_guide/unittesting.rst:410
msgid ""
"(This shortcut only works if a single matching reference image is found. If "
"multiple matches are found you will need to provide the full path to the "
"reference image.)"
msgstr ""
"(Dit verkorten werkt alleen als er één enkele overeenkomende afbeelding, "
"waarnaar verwezen moet worden, wordt gevonden. Als meerdere overeenkomsten "
"worden gevonden dient u het volledige pad naar de afbeelding waarnaar "
"verwezen moet worden op te geven.)"

#: ../../docs/developers_guide/unittesting.rst:414
msgid ""
"The script also accepts http urls for the rendered image, so you can "
"directly copy a rendered image url from the cdash results page and pass it "
"to the script."
msgstr ""
"Het script accepteert ook URL's voor HTTP voor de gerenderde afbeelding. U "
"kunt dus een URL van een gerenderde afbeelding direct vanuit de pagina met "
"resultaten van cdash kopiëren en in het script plakken."

#: ../../docs/developers_guide/unittesting.rst:417
msgid ""
"Be careful when generating mask images - you should always view the "
"generated mask image and review any white areas in the image. Since these "
"pixels are ignored, make sure that these white images do not cover any "
"important portions of the reference image -- otherwise your unit test will "
"be meaningless!"
msgstr ""
"Wees voorzichtig bij het maken van maskerafbeeldingen - u zou altijd de "
"maskerafbeelding moeten bekijken en witte gebieden in de afbeeldingen nader "
"moeten bekijken. Omdat die pixels worden genegeerd, zorg er dan voor dat die"
" witte afbeeldingen geen belangrijke gedeelten van de afbeelding waarnaar "
"verwezen wordt bedekken -- anders heeft uw eenheidstest geen betekenis!"

#: ../../docs/developers_guide/unittesting.rst:422
msgid ""
"Similarly, you can manually \"white out\" portions of the mask if you "
"deliberately want to exclude them from the test. This can be useful e.g. for"
" tests which mix symbol and text rendering (such as legend tests), where the"
" unit test is not designed to test the rendered text and you don't want the "
"test to be subject to cross-platform text rendering differences."
msgstr ""
"Op dezelfde wijze kunt u handmatig gedeelten van het masker \"wit maken\" "
"als u ze met opzet wilt uitsluiten van de test. Dit kan nuttig zijn voor "
"bijv. testen met een mix van symbool- en tekstrenderen (zoals testen van de "
"legenda), waar de eenheidstest niet is ontworpen om de gerenderde tekst te "
"testen en u niet wilt dat de test onderworpen wordt aan kruis-platform "
"verschillen bij het renderen van tekst."

#: ../../docs/developers_guide/unittesting.rst:428
msgid ""
"To compare images in QGIS unit tests you should use the class "
"``QgsMultiRenderChecker`` or one of its subclasses."
msgstr ""
"U zou de klasse ``QgsMultiRenderChecker`` of een van zijn subklassen moeten "
"gebruiken om afbeeldingen te vergelijken met eenheidstesten van QGIS."

#: ../../docs/developers_guide/unittesting.rst:431
msgid "To improve tests robustness here are few tips:"
msgstr "Hier zijn enkele tips om de robuustheid van testen te verbeteren:"

#: ../../docs/developers_guide/unittesting.rst:433
msgid ""
"Disable antialiasing if you can, as this minimizes cross-platform rendering "
"differences."
msgstr ""
"Schakel antialiasing uit als u kunt, dit minimaliseert kruis-platform "
"verschillen bij renderen."

#: ../../docs/developers_guide/unittesting.rst:435
msgid ""
"Make sure your reference images are \"chunky\"... i.e. don't have 1 px wide "
"lines or other fine features, and use large, bold fonts (14 points or more "
"is recommended)."
msgstr ""
"Zorg er voor dat afbeeldingen waarnaar verwezen wordt \"blokkig\"… zijn, d. "
"i. geen lijnen met een breedte van 1 px hebben of andere fijne objecten, en "
"gebruik grote, vette lettertypen (14 punten of meer wordt aanbevolen)."

#: ../../docs/developers_guide/unittesting.rst:438
msgid ""
"Sometimes tests generate slightly different sized images (e.g. legend "
"rendering tests, where the image size is dependent on font rendering size - "
"which is subject to cross-platform differences). To account for this, use "
"``QgsMultiRenderChecker::setSizeTolerance()`` and specify the maximum number"
" of pixels that the rendered image width and height differ from the "
"reference image."
msgstr ""
"Soms maken testen enigszins afwijkende grootten van afbeeldingen (bijv. "
"testen voor renderen van legenda's, waar de grootte van de afbeelding "
"afhankelijk is van de grootte voor renderen van het lettertype - wat "
"onderwerp is voor kruis-platform verschillen). Gebruik, om hier rekening mee"
" te houden, ``QgsMultiRenderChecker::setSizeTolerance()`` en specificeer het"
" maximale aantal pixels die de gerenderde afbeelding in breedte en hoogte "
"mag afwijken van de afbeelding waarnaar verwezen wordt."

#: ../../docs/developers_guide/unittesting.rst:444
msgid ""
"Don't use transparent backgrounds in reference images (CDash does not "
"support them). Instead, use ``QgsMultiRenderChecker::drawBackground()`` to "
"draw a checkboard pattern for the reference image background."
msgstr ""
"Gebruik geen transparante achtergronden in afbeelding waarnaar verwezen "
"wordt (CDash ondersteunt ze niet). Gebruik in plaats daarvan "
"``QgsMultiRenderChecker::drawBackground()`` om een patroon voor een "
"schaakbord te tekenen voor de achtergrond van de afbeelding waarnaar "
"verwezen wordt."

#: ../../docs/developers_guide/unittesting.rst:447
msgid ""
"When fonts are required, use the font specified in "
"``QgsFontUtils::standardTestFontFamily()`` (\"QGIS Vera Sans\")."
msgstr ""
"Wanneer lettertypen vereist zijn, gebruik dan het lettertype dat is "
"gespecificeerd in ``QgsFontUtils::standardTestFontFamily()`` (\"QGIS Vera "
"Sans\")."

#: ../../docs/developers_guide/unittesting.rst:452
msgid "Adding your unit test to CMakeLists.txt"
msgstr "Uw test voor eenheden toevoegen aan CMakeLists.txt"

#: ../../docs/developers_guide/unittesting.rst:455
msgid ""
"Adding your unit test to the build system is simply a matter of editing the "
":file:`CMakeLists.txt` in the test directory, cloning one of the existing "
"test blocks, and then replacing your test class name into it. For example:"
msgstr ""
"Toevoegen van uw test voor eenheden aan het bouwsysteem is eenvoudigweg een "
"geval van het bewerken van :file:`CMakeLists.txt` in de map test, klonen van"
" één van de bestaande tekstblokken, en dan de naam van uw testklasse daar "
"invullen. Bijvoorbeeld:"

#: ../../docs/developers_guide/unittesting.rst:466
msgid "The ADD_QGIS_TEST macro explained"
msgstr "De macro ADD_QGIS_TEST uitgelegd"

#: ../../docs/developers_guide/unittesting.rst:468
msgid ""
"We'll run through these lines briefly to explain what they do, but if you "
"are not interested, just do the step explained in the above section."
msgstr ""
"We zullen kort door deze regels gaan om uit te leggen wat zij doen, maar als"
" u daar niet in geïnteresseerd bent, doe dan alleen de stap die is uitgelegd"
" in bovenstaand gedeelte."

#: ../../docs/developers_guide/unittesting.rst:503
msgid ""
"Let's look a little more in detail at the individual lines. First we define "
"the list of sources for our test. Since we have only one source file "
"(following the methodology described above where class declaration and "
"definition are in the same file) its a simple statement:"
msgstr ""
"Laten we eens iets meer in detail kijken naar de individuele regels. Eerst "
"definiëren we de lijst met bronnen voor onze test. Omdat we slechts één "
"bronbestand hebben (aldus de methodologie volgend die hierboven is "
"beschreven waar declaratie van de klasse en definitie in hetzelfde bestand "
"staan) is het een eenvoudig argument:"

#: ../../docs/developers_guide/unittesting.rst:512
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr ""
"Omdat onze testklasse moet worden uitgevoerd door de Qt meta object compiler"
" (moc) dienen we ook een aantal regels te verschaffen om dat mogelijk te "
"maken:"

#: ../../docs/developers_guide/unittesting.rst:521
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation we included the moc outputs directly into our test class, so "
"that will give it (among other things) a main method so the class can be "
"compiled as an executable:"
msgstr ""
"Vervolgens vertellen we cmake dat het een executable moet maken vanuit de "
"testklasse. Onthoud dat in het vorige gedeelte op de laatste regel van de "
"implementatie van de klasse we de uitvoer voor MOC direct opnamen in onze "
"testklasse, zodat het (naast ander dingen) een hoofdmethode zal geven zodat "
"de klasse als een executable kan worden gecompileerd:"

#: ../../docs/developers_guide/unittesting.rst:532
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but we will "
"be working to replace that with the specific Qt libraries that each class "
"needs only. Of course you also need to link to the relevant qgis libraries "
"as required by your unit test."
msgstr ""
"Vervolgens dienen we enkele afhankelijkheden voor bibliotheken te "
"specificeren. Op dit moment worden klassen geïmplementeerd met een catch-all"
" QT_LIBRARIES afhankelijkheid, maar we zullen er aan werken om dat te "
"vervangen door de specifieke bibliotheken van Qt die elke klasse alleen "
"nodig heeft. Natuurlijk dient u ook de relevante bibliotheken van QGIS te "
"koppelen, zoals vereist door uw test voor eenheden."

#: ../../docs/developers_guide/unittesting.rst:542
msgid ""
"Next we tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something we plan to remove in the future so that "
"the tests can run directly from inside the source tree."
msgstr ""
"Vervolgens vertellen we cmake om de testen te installeren op dezelfde plaats"
" als waar de binaries van QGIS zelf staan. Dit is iets waarvan ik van plan "
"ben om dit in de toekomst te verwijderen zodat de testen direct vanuit de "
"boom van de bron kunnen worden uitgevoerd."

#: ../../docs/developers_guide/unittesting.rst:569
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / ctest."
" Here is where the best magic happens - we register the class with ctest. If"
" you recall in the overview we gave in the beginning of this section, we are"
" using both QtTest and CTest together. To recap, QtTest adds a main method "
"to your test unit and handles calling your test methods within the class. It"
" also provides some macros like ``QVERIFY`` that you can use as to test for "
"failure of the tests using conditions. The output from a QtTest unit test is"
" an executable which you can run from the command line. However when you "
"have a suite of tests and you want to run each executable in turn, and "
"better yet integrate running tests into the build process, the CTest is what"
" we use."
msgstr ""
"Tenslotte gebruikt bovenstaande ``ADD_TEST`` om de test te registreren met "
"cmake / ctest. Hier is waar de beste magie gebeurt - we registreren de "
"klasse met ctest. Als u zich het overzicht nog herinnert dat we gaven in het"
" begin van dit gedeelte, gebruiken we zowel QtTest als CTest samen. "
"Recapitulerend, QtTest voegt een hoofdmethode toe aan uw test voor eenheden "
"en behandelt het aanroepen van uw testmethoden binnen de klasse. Het "
"verschaft ook enkele macro's zoals ``QVERIFY`` die u kunt gebruiken om te "
"testen op mislukkingen van de door de testen gebruikte voorwaarden. De "
"uitvoer van een QtTest test voor eenheden is een executable die u kunt "
"uitvoeren vanaf de opdrachtregel. Wanneer u echter een suite van testen "
"heeft en u wilt elke executable op zijn beurt uitvoeren, en beter nog "
"uitvoerende testen integreren in het bouwproces, is de CTest wat we "
"gebruiken."

#: ../../docs/developers_guide/unittesting.rst:582
msgid "Building your unit test"
msgstr "Uw test voor eenheden bouwen"

#: ../../docs/developers_guide/unittesting.rst:584
msgid ""
"To build the unit test you need only to make sure that ``ENABLE_TESTS=true``"
" in the cmake configuration. There are two ways to do this:"
msgstr ""
"Voor het bouwen van de test voor eenheden dient u er alleen voor te zorgen "
"dat ``ENABLE_TESTS=true`` in de configuratie cmake. Er zijn twee manieren om"
" dat te doen:"

#: ../../docs/developers_guide/unittesting.rst:587
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively "
"set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr ""
"Voer ``ccmake ..`` uit ( of ``cmakesetup ..`` onder Windows) en stel "
"interactief de vlag ``ENABLE_TESTS`` in op ``ON``."

#: ../../docs/developers_guide/unittesting.rst:589
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr ""
"Voeg een vlag voor de opdrachtregel toe aan cmake bijv. ``cmake "
"-DENABLE_TESTS=true ..``"

#: ../../docs/developers_guide/unittesting.rst:591
msgid ""
"Other than that, just build QGIS as per normal and the tests should build "
"too."
msgstr ""
"Anders dan dat, bouw QGIS gewoon zoals normaal en de testen zouden "
"meegebouwd moeten worden."

#: ../../docs/developers_guide/unittesting.rst:595
msgid "Run your tests"
msgstr "Voer uw testen uit"

#: ../../docs/developers_guide/unittesting.rst:598
msgid ""
"The simplest way to run the tests is as part of your normal build process:"
msgstr ""
"De eenvoudigste manier om de testen uit te voeren is als deel van uw normale"
" bouwproces:"

#: ../../docs/developers_guide/unittesting.rst:604
msgid ""
"The ``make test`` command will invoke CTest which will run each test that "
"was registered using the ADD_TEST CMake directive described above. Typical "
"output from ``make test`` will look like this:"
msgstr ""
"De opdracht ``make test`` zal CTest activeren dat elke test zal uitvoeren "
"die werd geregistreerd met behulp van de ADD_TEST CMake directive beschreven"
" hierboven. Normale uitvoer van ``make test`` zal er uitzien zoals dit:"

#: ../../docs/developers_guide/unittesting.rst:624
msgid ""
"If a test fails, you can use the ctest command to examine more closely why "
"it failed. Use the ``-R`` option to specify a regex for which tests you want"
" to run and ``-V`` to get verbose output:"
msgstr ""
"Als een test mislukt, kunt u de opdracht ctest gebruiken om meer nader te "
"bekijken waarom het mislukt is. Gebruik de optie ``-R`` om een regex te "
"specificeren voor de testen die u wilt uitvoeren en ``-V`` om uitgebreide "
"uitvoer te krijgen:"

#: ../../docs/developers_guide/unittesting.rst:669
msgid "Running individual tests"
msgstr "Individuele testen uitvoeren"

#: ../../docs/developers_guide/unittesting.rst:671
msgid ""
"C++ tests are ordinary applications. You can run them from the build folder "
"like any executable."
msgstr ""
"C++-testen zijn gewone toepassingen. U kunt ze uitvoeren vanuit de map "
"build, net als elk ander uitvoerbaar bestand."

#: ../../docs/developers_guide/unittesting.rst:687
msgid ""
"These tests also take `command line arguments <https://doc-"
"snapshots.qt.io/qt5-5.9/qtest-overview.html#qt-test-command-line-"
"arguments>`_. This makes it possible to run a specific subset of tests:"
msgstr ""
"Deze testen accepteren ook `argumenten voor de opdrachtregel <https://doc-"
"snapshots.qt.io/qt5-5.9/qtest-overview.html#qt-test-command-line-"
"arguments>`_. Dit maakt het mogelijk een specifieke subset van testen uit te"
" voeren:"

#: ../../docs/developers_guide/unittesting.rst:703
msgid "Debugging unit tests"
msgstr "Debuggen met eenheidstesten"

#: ../../docs/developers_guide/unittesting.rst:706
msgid "C++ Tests"
msgstr "C++-testen"

#: ../../docs/developers_guide/unittesting.rst:708
msgid ""
"For C++ unit tests, QtCreator automatically adds run targets, so you can "
"start them from the debugger."
msgstr ""
"Voor eenheidstesten in C++ voegt QtCreator automatisch doelen voor "
"uitvoering toe, dus u kunt ze vanuit de debugger starten."

#: ../../docs/developers_guide/unittesting.rst:711
msgid ""
"If you go to *Projects* and there to the *Build & Run* --> Desktop *Run* "
"tab, you can also specify command line parameters that will allow a subset "
"of the tests to be run inside a .cpp file in the debugger."
msgstr ""
"Als u gaat naar *Projects* en daar dan naar *Build & Run* --> Desktop tab "
"*Run*, kunt u ook parameters voor de opdrachtregel specificeren die toestaan"
" dat een subset van de testen worden uitgevoerd binnen een bestand .cpp in "
"de debugger."

#: ../../docs/developers_guide/unittesting.rst:716
msgid "Python Tests"
msgstr "Python-testen"

#: ../../docs/developers_guide/unittesting.rst:718
msgid ""
"It's also possible to start Python unit tests from QtCreator with GDB. For "
"this, you need to go to :guilabel:`Projects` and choose :guilabel:`Run` "
"under :guilabel:`Build & Run`. Then add a new ``Run configuration`` with the"
" executable ``/usr/bin/python3`` and the Command line arguments set to the "
"path of the unit test python file, e.g. "
":file:`/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattributeformeditorwidget.py`."
msgstr ""
"Het is ook mogelijk eenheidstesten voor Python te starten vanuit QtCreator "
"met GDB. Hiervoor dient u te gaan naar :guilabel:`Projects` en te kiezen "
"voor :guilabel:`Run` onder :guilabel:`Build & Run`. Voeg dan een nieuwe "
"``Run configuration`` toe met de executable ``/usr/bin/python3`` en de "
"argumenten voor de opdrachtregel ingesteld op het pad van het bestand voor "
"Python van de eenheidstest, bijv. "
":file:`/home/user/dev/qgis/QGIS/tests/src/python/test_qgsattributeformeditorwidget.py`."

#: ../../docs/developers_guide/unittesting.rst:726
msgid "Now also change the ``Run Environment`` and add 3 new variables:"
msgstr "Wijzig nu ook de ``Run Environment`` en voeg 3 nieuwe variabelen toe:"

#: ../../docs/developers_guide/unittesting.rst:729
msgid "Variable"
msgstr "Variabele"

#: ../../docs/developers_guide/unittesting.rst:729
msgid "Value"
msgstr "Waarde"

#: ../../docs/developers_guide/unittesting.rst:731
msgid "PYTHONPATH"
msgstr "PYTHONPATH"

#: ../../docs/developers_guide/unittesting.rst:731
msgid ""
"[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"
msgstr ""
"[build]/output/python/:[build]/output/python/plugins:[source]/tests/src/python"

#: ../../docs/developers_guide/unittesting.rst:733
msgid "QGIS_PREFIX_PATH"
msgstr "QGIS_PREFIX_PATH"

#: ../../docs/developers_guide/unittesting.rst:733
msgid "[build]/output"
msgstr "[build]/output"

#: ../../docs/developers_guide/unittesting.rst:735
msgid "LD_LIBRARY_PATH"
msgstr "LD_LIBRARY_PATH"

#: ../../docs/developers_guide/unittesting.rst:735
msgid "[build]/output/lib"
msgstr "[build]/output/lib"

#: ../../docs/developers_guide/unittesting.rst:738
msgid ""
"Replace ``[build]`` with your build directory and ``[source]`` with your "
"source directory."
msgstr ""
"Vervang ``[build]`` door de map van uw build en ``[source]`` door de map van"
" uw bron."

#: ../../docs/developers_guide/unittesting.rst:742
msgid "Have fun"
msgstr "Veel plezier"

#: ../../docs/developers_guide/unittesting.rst:744
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope you "
"will get into the habit of writing test to test new functionality and to "
"check for regressions. Some aspects of the test system (in particular the "
":file:`CMakeLists.txt` parts) are still being worked on so that the testing "
"framework works in a truly platform independent way."
msgstr ""
"Welnu, dat is het einde voor dit gedeelte over het schrijven van testen voor"
" eenheden in QGIS. We hopen dat u ook testen zult gaan schrijven om nieuwe "
"functionaliteiten te testen en om te controleren op regressies. Aan sommige "
"aspecten van het testsysteem (in het bijzonder de delen voor "
":file:`CMakeLists.txt`) wordt nog steeds gewerkt zodat het framework voor "
"testen werkt op een echte platform-onafhankelijke manier."
