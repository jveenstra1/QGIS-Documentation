# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project testing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-10 11:07+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/user_manual/processing/3rdParty.rst:4
msgid "Configuring external applications"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:11
msgid ""
"The processing framework can be extended using additional applications. "
"Algorithms that rely on external applications are managed by their own "
"algorithm providers. Additional providers can be found as separate "
"plugins, and installed using the QGIS Plugin Manager."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:17
msgid ""
"This section will show you how to configure the Processing framework to "
"include these additional applications, and it will explain some "
"particular features of the algorithms based on them. Once you have "
"correctly configured the system, you will be able to execute external "
"algorithms from any component like the toolbox or the graphical modeler, "
"just like you do with any other algorithm."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:24
msgid ""
"By default, algorithms that rely on an external application not shipped "
"with QGIS are not enabled. You can enable them in the Processing settings"
" dialog if they are installed on your system."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:31
msgid "A note for Windows users"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:33
msgid ""
"If you are not an advanced user and you are running QGIS on Windows, you "
"might not be interested in reading the rest of this chapter. Make sure "
"you install QGIS in your system using the standalone installer. That will"
" automatically install SAGA and GRASS in your system and configure them "
"so they can be run from QGIS. All the algorithms from these providers "
"will be ready to be run without needing any further configuration. If "
"installing with the OSGeo4W application, make sure that you also select "
"SAGA and GRASS for installation."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:46
msgid "A note on file formats"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:48
msgid ""
"When using external software, opening a file in QGIS does not mean that "
"it can be opened and processed in that other software. In most cases, "
"other software can read what you have opened in QGIS, but in some cases, "
"that might not be true. When using databases or uncommon file formats, "
"whether for raster or vector layers, problems might arise. If that "
"happens, try to use well-known file formats that you are sure are "
"understood by both programs, and check the console output (in the log "
"panel) to find out what is going wrong."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:58
msgid ""
"You might for instance get trouble and not be able to complete your work "
"if you call an external algorithm with a GRASS raster layers as input. "
"For this reason, such layers will not appear as available to algorithms."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:64
msgid ""
"You should, however, not have problems with vector layers, since QGIS "
"automatically converts from the original file format to one accepted by "
"the external application before passing the layer to it. This adds extra "
"processing time, which might be significant for large layers, so do not "
"be surprised if it takes more time to process a layer from a DB "
"connection than a layer from a Shapefile format dataset of similar size."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:72
msgid ""
"Providers not using external applications can process any layer that you "
"can open in QGIS, since they open it for analysis through QGIS."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:75
msgid ""
"All raster and vector output formats produced by QGIS can be used as "
"input layers. Some providers do not support certain formats, but all can "
"export to common  formats that can later be transformed by QGIS "
"automatically. As for input layers, if a conversion is needed, that might"
" increase the processing time."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:84
msgid "A note on vector layer selections"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:86
msgid ""
"External applications may also be made aware of the selections that exist"
" in vector layers within QGIS. However, that requires rewriting all input"
" vector layers, just as if they were originally in a format not supported"
" by the external application. Only when no selection exists, or the *Use "
"only selected features* option is not enabled in the processing general "
"configuration, can a layer be directly passed to an external application."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:95
msgid ""
"In other cases, exporting only selected features is needed, which causes "
"longer execution times."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:102
msgid "SAGA"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:104
msgid ""
"SAGA algorithms can be run from QGIS if SAGA included in the QGIS "
"installation."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:107
msgid ""
"If you are running Windows, both the stand-alone installer and the "
"OSGeo4W installer include SAGA."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:111
msgid "About SAGA grid system limitations"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:113
msgid ""
"Most SAGA algorithms that require several input raster layers require "
"them to have the same grid system. That is, they must cover the same "
"geographic area and have the same cell size, so their corresponding grids"
" match. When calling SAGA algorithms from QGIS, you can use any layer, "
"regardless of its cell size and extent. When multiple raster layers are "
"used as input for a SAGA algorithm, QGIS resamples them to a common grid "
"system and then passes them to SAGA (unless the SAGA algorithm can "
"operate with layers from different grid systems)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:124
msgid ""
"The definition of that common grid system is controlled by the user, and "
"you will find several parameters in the SAGA group of the settings window"
" to do so. There are two ways of setting the target grid system:"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:129
msgid ""
"Setting it manually. You define the extent by setting the values of the "
"following parameters:"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:132
msgid ":guilabel:`Resampling min X`"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:133
msgid ":guilabel:`Resampling max X`"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:134
msgid ":guilabel:`Resampling min Y`"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:135
msgid ":guilabel:`Resampling max Y`"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:136
msgid ":guilabel:`Resampling cellsize`"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:138
msgid ""
"Notice that QGIS will resample input layers to that extent, even if they "
"do not overlap with it."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:140
msgid ""
"Setting it automatically from input layers. To select this option, just "
"check the :guilabel:`Use min covering grid system for resampling` option."
" All the other settings will be ignored and the minimum extent that "
"covers all the input layers will be used. The cell size of the target "
"layer is the maximum of all cell sizes of the input layers."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:148
msgid ""
"For algorithms that do not use multiple raster layers, or for those that "
"do not need a unique input grid system, no resampling is performed before"
" calling SAGA, and those parameters are not used."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:153
msgid "Limitations for multi-band layers"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:155
msgid ""
"Unlike QGIS, SAGA has no support for multi-band layers. If you want to "
"use a multiband layer (such as an RGB or multispectral image), you first "
"have to split it into single-banded images. To do so, you can use the "
"'SAGA/Grid - Tools/Split RGB image' algorithm (which creates three images"
" from an RGB image) or the 'SAGA/Grid - Tools/Extract band' algorithm (to"
" extract a single band)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:163
msgid "Limitations in cell size"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:165
msgid ""
"SAGA assumes that raster layers have the same cell size in the X and Y "
"axis. If you are working with a layer with different values for "
"horizontal and vertical cell size, you might get unexpected results. In "
"this case, a warning will be added to the processing log, indicating that"
" an input layer might not be suitable to be processed by SAGA."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:173
msgid "Logging"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:175
msgid ""
"When QGIS calls SAGA, it does so using its command-line interface, thus "
"passing a set of commands to perform all the required operations. SAGA "
"shows its progress by writing information to the console, which includes "
"the percentage of processing already done, along with additional content."
" This output is filtered and used to update the progress bar while the "
"algorithm is running."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:183
msgid ""
"Both the commands sent by QGIS and the additional information printed by "
"SAGA can be logged along with other processing log messages, and you "
"might find them useful to track what is going on when QGIS runs a SAGA "
"algorithm. You will find two settings, namely :guilabel:`Log console "
"output` and :guilabel:`Log execution commands`, to activate that logging "
"mechanism."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:191
msgid ""
"Most other providers that use external applications and call them through"
" the command-line have similar options, so you will find them as well in "
"other places in the processing settings list."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:198
msgid "R scripts"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:200
msgid ""
"To enable R in Processing you need to install the **Processing R "
"Provider** plugin and configure R for QGIS."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:203
msgid ""
"Configuration is done in :menuselection:`Provider --> R` in the "
":guilabel:`Processing` tab of :menuselection:`Settings --> Options`."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:207
msgid ""
"Depending on your operating system, you may have to use :guilabel:`R "
"folder` to specify where your R binaries are located."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:210
msgid ""
"On **Windows** the R executable file is normally in a folder "
"(``R-<version>``) under :file:`C:\\\\Program Files\\\\R\\\\`. Specify the"
" folder and **NOT** the binary!"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:214
msgid ""
"On **Linux** you just have to make sure that the R folder is in the PATH "
"environment variable. If ``R`` in a terminal window starts R, then you "
"are ready to go."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:218
msgid ""
"After installing the **Processing R Provider** plugin, you will find some"
" example scripts in the :guilabel:`Processing Toolbox`:"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:221
msgid ""
":guilabel:`Scatterplot` runs an R function that produces a scatter plot "
"from two numerical fields of the provided vector layer."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:223
msgid ""
":guilabel:`test_sf` does some operations that depend on the ``sf`` "
"package and can be used to check if the R package ``sf`` is installed. If"
" the package is not installed, R will try to install it (and all the "
"packages it depends on) for you, using the :guilabel:`Package repository`"
" specified in :menuselection:`Provider --> R` in the Processing options. "
"The default is `http://cran.at.r-project.org/`. Installing may take some "
"time..."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:232
msgid ""
":guilabel:`test_sp` can be used to check if the R package ``sp`` is "
"installed. If the package is not installed, R will try to install it for "
"you."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:239
msgid ""
"If you have R configured correctly for QGIS, you should be able to run "
"these scripts."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:246
msgid "Adding R scripts from the QGIS collection"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:248
msgid ""
"R integration in QGIS is different from that of SAGA in that there is not"
" a predefined set of algorithms you can run (except for some example "
"script that come with the *Processing R Provider* plugin)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:252
msgid ""
"A set of example R scripts is available in the QGIS Repository. Perform "
"the following steps to load and enable them using the *QGIS Resource "
"Sharing* plugin."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:256
msgid ""
"Add the *QGIS Resource Sharing* plugin (you may have to enable "
":guilabel:`Show also experimental plugins` in the Plugin Manager "
":guilabel:`Settings`)"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:259
msgid "Open it (Plugins --> Resource Sharing --> Resource Sharing)"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:260
msgid "Choose the :guilabel:`Settings` tab"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:261
msgid "Click :guilabel:`Reload repositories`"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:262
msgid "Choose the :guilabel:`All` tab"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:263
msgid ""
"Select :guilabel:`QGIS R script collection` in the list and click on the "
":guilabel:`Install` button"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:265
msgid "The collection should now be listed in the :guilabel:`Installed` tab"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:267
msgid "Close the plugin"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:268
msgid ""
"Open the :guilabel:`Processing Toolbox`, and if everything is OK, the "
"example scripts will be present under R, in various groups (only some of "
"the groups are expanded in the screenshot below)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:276
msgid "The :guilabel:`Processing Toolbox` with some R scripts shown"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:278
msgid ""
"The scripts at the top are the example scripts from the *Processing R "
"Provider* plugin."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:281
msgid ""
"If, for some reason, the scripts are not available in the "
":guilabel:`Processing Toolbox`, you can try to:"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:284
msgid ""
"Open the Processing settings (:menuselection:`Settings --> Options --> "
"Processing` tab)"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:287
msgid "Go to :menuselection:`Providers --> R --> R scripts folder`"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:289
msgid "On Ubuntu, set the path to (or, better, include in the path):"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:291
msgid ""
"/home/<user>/.local/share/QGIS/QGIS3/profiles/default/resource_sharing/repositories/github.com/qgis"
"/QGIS-Resources/collections/rscripts"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:296
msgid "On Windows, set the path to (or, better, include in the path):"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:298
msgid ""
"C:\\\\Users\\\\<user>\\\\AppData\\\\Roaming\\\\QGIS\\\\QGIS3\\\\profiles\\\\default\\\\resource_sharing\\\\repositories\\\\github.com\\\\qgis"
"\\\\QGIS-Resources\\\\collections\\\\rscripts"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:300
msgid ""
"To edit, double-click. You can then choose to just paste / type the path,"
" or you can navigate to the directory by using the :guilabel:`...` button"
" and press the :guilabel:`Add` button in the dialog that opens. It is "
"possible to provide several directories here. They will be separated by a"
" semicolon (\";\")."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:310
msgid ""
"If you would like to get all the R scrips from the QGIS 2 on-line "
"collection, you can select *QGIS R script collection (from QGIS 2)* "
"instead of *QGIS R script collection*. You will find probably find that "
"scripts that depend on vector data input or output will not work."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:320
msgid "Creating R scripts"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:322
msgid ""
"You can write scripts and call R commands, as you would do from R. This "
"section shows you the syntax for using R commands in QGIS, and how to use"
" QGIS objects (layers, tables) in them."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:326
msgid ""
"To add an algorithm that calls an R function (or a more complex R script "
"that you have developed and you would like to have available from QGIS), "
"you have to create a script file that performs the R commands."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:331
msgid ""
"R script files have the extension :file:`.rsx`, and creating them is "
"pretty easy if you just have a basic knowledge of R syntax and R "
"scripting. They should be stored in the R scripts folder. You can specify"
" the folder (:guilabel:`R scripts folder`) in the :guilabel:`R` settings "
"group in Processing settings dialog)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:338
msgid ""
"Let’s have a look at a very simple script file, which calls the R method "
"``spsample`` to create a random grid within the boundary of the polygons "
"in a given polygon layer. This method belongs to the ``maptools`` "
"package. Since almost all the algorithms that you might like to "
"incorporate into QGIS will use or generate spatial data, knowledge of "
"spatial packages like ``maptools`` and ``sp``/``sf``, is very useful."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:359
msgid ""
"The first lines, which start with a double Python comment sign (``##``), "
"define the display name and group of the script, and tell QGIS about its "
"inputs and outputs."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:364
msgid ""
"To find out more about how to write your own R scripts, have a look at "
"the :ref:`R Intro <r-intro>` section in the training manual and consult "
"the :ref:`QGIS R Syntax <r-syntax>` section."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:368
msgid ""
"When you declare an input parameter, QGIS uses that information for two "
"things: creating the user interface to ask the user for the value of that"
" parameter, and creating a corresponding R variable that can be used as R"
" function input."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:373
msgid ""
"In the above example, we have declared an input of type ``vector``, named"
" ``Vector_layer``. When executing the algorithm, QGIS will open the layer"
" selected by the user and store it in a variable named ``Vector_layer``. "
"So, the name of a parameter is the name of the variable that you use in R"
" for accessing the value of that parameter (you should therefore avoid "
"using reserved R words as parameter names)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:381
msgid ""
"Spatial parameters such as vector and raster layers are read using the "
"``st_read()`` (or ``readOGR``) and ``brick()`` (or ``readGDAL``) commands"
" (you do not have to worry about adding those commands to your "
"description file -- QGIS will do it), and they are stored as ``sf`` (or "
"``Spatial*DataFrame``) objects."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:387
msgid ""
"Table fields are stored as strings containing the name of the selected "
"field."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:390
msgid ""
"Vector files can be read using the ``readOGR()`` command instead of "
"``st_read()`` by specifying ``##load_vector_using_rgdal``. This will "
"produce a ``Spatial*DataFrame`` object instead of an ``sf`` object."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:395
msgid ""
"Raster files can be read using the ``readGDAL()`` command instead of "
"``brick()`` by specifying ``##load_raster_using_rgdal``."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:398
msgid ""
"If you are an advanced user and do not want QGIS to create the object for"
" the layer, you can use ``##pass_filenames`` to indicate that you prefer "
"a string with the filename. In this case, it is up to you to open the "
"file before performing any operation on the data it contains."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:404
msgid ""
"With the above information, it is possible to understand the first lines "
"of the R script (the first line not starting with a Python comment "
"character)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:414
msgid ""
"The ``spsample`` function is provided by the *sp* library, so the first "
"thing we do is to load that library. The variable ``Vector_layer`` "
"contains an ``sf`` object. Since we are going to use a function "
"(``spsample``) from the *sp* library, we must convert the ``sf`` object "
"to a ``SpatialPolygonsDataFrame`` object using the ``as`` function."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:421
msgid ""
"Then we calling the ``spsample`` function, with this object and the "
"``numpoints`` input parameter (which specifies the number of points to "
"generate)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:425
msgid ""
"Since we have declared a vector output named ``Output``, we have to "
"create a variable named ``Output`` containing an ``sf`` object."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:428
msgid ""
"We do this in two steps. First we create a ``SpatialPolygonsDataFrame`` "
"object from the result of the function, using the "
"*SpatialPointsDataFrame* function, and then we convert that object to an "
"``sf`` object using the ``st_as_sf`` function (of the *sf* library)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:434
msgid ""
"You can use whatever names you like for your intermediate variables. Just"
" make sure that the variable storing your final result has the defined "
"name (in this case ``Output``), and that it contains a suitable value (an"
" ``sf`` object for vector layer output)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:440
msgid ""
"In this case, the result obtained from the ``spsample`` method had to be "
"converted explicitly into an ``sf`` object via a "
"``SpatialPointsDataFrame`` object, since it is itself an object of class "
"``ppp``, which can not be returned to QGIS."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:445
msgid ""
"If your algorithm generates raster layers, the way they are saved will "
"depend on whether or not you have used the ``##dontuserasterpackage`` "
"option. If you have used it, layers are saved using the ``writeGDAL()`` "
"method. If not, the ``writeRaster()`` method from the ``raster`` package "
"will be used."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:453
msgid ""
"If you have used the ``##pass_filenames`` option, outputs are generated "
"using the ``raster`` package (with ``writeRaster()``)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:456
msgid ""
"If your algorithm does not generate a layer, but a text result in the "
"console instead, you have to indicate that you want the console to be "
"shown once the execution is finished. To do so, just start the command "
"lines that produce the results you want to print with the ``>`` ('greater"
" than') sign. Only output from lines prefixed with ``>`` are shown. For "
"instance, here is the description file of an algorithm that performs a "
"normality test on a given field (column) of the attributes of a vector "
"layer:"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:474
msgid ""
"The output of the last line is printed, but the output of the first is "
"not (and neither are the outputs from other command lines added "
"automatically by QGIS)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:478
msgid ""
"If your algorithm creates any kind of graphics (using the ``plot()`` "
"method), add the following line (``output_plots_to_html`` used to be "
"``showplots``):"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:486
msgid ""
"This will cause QGIS to redirect all R graphical outputs to a temporary "
"file, which will be opened once R execution has finished."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:489
msgid ""
"Both graphics and console results will be available through the "
"processing results manager."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:492
msgid ""
"For more information, please check the R scripts in the official QGIS "
"collection (you download and install them using the *QGIS Resource "
"Sharing* plugin, as explained elsewhere). Most of them are rather simple "
"and will greatly help you understand how to create your own scripts."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:499
msgid ""
"The ``sf``, ``rgdal`` and ``raster`` libraries are loaded by default, so "
"you do not have to add the corresponding ``library()`` commands. However,"
" other additional libraries that you might need have to be explicitly "
"loaded by typing: ``library(ggplot2)`` (to load the ``ggplot2`` library)."
" If the package is not already installed on your machine, Processing will"
" try to download and install it. In this way the package will also become"
" available in R Standalone. **Be aware** that if the package has to be "
"downloaded, the script may take a long time to run the first time."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:511
msgid "R libraries"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:513
msgid ""
"The R script ``sp_test`` tries to load the R packages ``sp`` and "
"``raster``."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:518
msgid "R libraries installed when running sf_test"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:520
msgid ""
"The R script *sf_test* tries to load ``sf`` and ``raster``. If these two "
"packages are not installed, R may try to load and install them (and all "
"the libraries that they depend on)."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:524
msgid ""
"The following R libraries end up in "
":file:`~/.local/share/QGIS/QGIS3/profiles/default/processing/rscripts` "
"after ``sf_test`` has been run from the Processing Toolbox on Ubuntu with"
" version 2.0 of the *Processing R Provider* plugin and a fresh install of"
" *R* 3.4.4 (*apt* package ``r-base-core`` only):"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:530
msgid ""
"``abind, askpass, assertthat, backports, base64enc, BH, bit, bit64, blob,"
" brew, callr, classInt, cli, colorspace, covr, crayon, crosstalk, curl, "
"DBI, deldir, desc, dichromat, digest, dplyr, e1071, ellipsis, evaluate, "
"fansi, farver, fastmap, gdtools, ggplot2, glue, goftest, gridExtra, "
"gtable, highr, hms, htmltools, htmlwidgets, httpuv, httr, jsonlite, "
"knitr, labeling, later, lazyeval, leafem, leaflet, leaflet.providers, "
"leafpop, leafsync, lifecycle, lwgeom, magrittr, maps, mapview, markdown, "
"memoise, microbenchmark, mime, munsell, odbc, openssl, pillar, pkgbuild, "
"pkgconfig, pkgload, plogr, plyr, png, polyclip, praise, prettyunits, "
"processx, promises, ps, purrr, R6, raster, RColorBrewer, Rcpp, reshape2, "
"rex, rgeos, rlang, rmarkdown, RPostgres, RPostgreSQL, rprojroot, RSQLite,"
" rstudioapi, satellite, scales, sf, shiny, sourcetools, sp, spatstat, "
"spatstat.data, spatstat.utils, stars, stringi, stringr, svglite, sys, "
"systemfonts, tensor, testthat, tibble, tidyselect, tinytex, units, utf8, "
"uuid, vctrs, viridis, viridisLite, webshot, withr, xfun, XML, xtable``"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:551
msgid "GRASS"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:553
msgid ""
"Configuring GRASS is not much different from configuring SAGA. First, the"
" path to the GRASS folder has to be defined, but only if you are running "
"Windows."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:557
msgid ""
"By default, the Processing framework tries to configure its GRASS "
"connector to use the GRASS distribution that ships along with QGIS. This "
"should work without problems for most systems, but if you experience "
"problems, you might have to configure the GRASS connector manually. Also,"
" if you want to use a different GRASS installation, you can change the "
"setting to point to the folder where the other version is installed. "
"GRASS 7 is needed for algorithms to work correctly."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:567
msgid ""
"If you are running Linux, you just have to make sure that GRASS is "
"correctly installed, and that it can be run without problem from a "
"terminal window."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:571
msgid ""
"GRASS algorithms use a region for calculations. This region can be "
"defined manually using values similar to the ones found in the SAGA "
"configuration, or automatically, taking the minimum extent that covers "
"all the input layers used to execute the algorithm each time. If the "
"latter approach is the behavior you prefer, just check the :guilabel:`Use"
" min covering region` option in the GRASS configuration parameters."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:584
msgid "LAStools"
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:586
msgid ""
"To use `LAStools <https://rapidlasso.com/lastools/>`_ in QGIS, you need "
"to download and install LAStools on your computer and install the "
"LAStools plugin (available from the official repository) in QGIS."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:590
msgid ""
"On Linux platforms, you will need `Wine <https://www.winehq.org/>`_ to be"
" able to run some of the tools."
msgstr ""

#: ../../docs/user_manual/processing/3rdParty.rst:593
msgid ""
"LAStools is activated and configured in the Processing options "
"(:menuselection:`Settings --> Options`, :guilabel:`Processing` tab, "
":menuselection:`Providers --> LAStools`), where you can specify the "
"location of LAStools (:guilabel:`LAStools folder`) and Wine "
"(:guilabel:`Wine folder`). On Ubuntu, the default Wine folder is "
":file:`/usr/bin`."
msgstr ""

#~ msgid "|updatedisclaimer|"
#~ msgstr ""

#~ msgid ""
#~ "You should, however, find no problems"
#~ " at all with vector layers, since "
#~ "QGIS automatically converts from the "
#~ "original file format to one accepted "
#~ "by the external application before "
#~ "passing the layer to it. This adds"
#~ " extra processing time, which might "
#~ "be significant if the layer has a"
#~ " large size, so do not be "
#~ "surprised if it takes more time to"
#~ " process a layer from a DB "
#~ "connection than it does to process "
#~ "one of a similar size stored in"
#~ " a shapefile."
#~ msgstr ""

#~ msgid ""
#~ "The processing framework can be extended"
#~ " using additional applications. Currently, "
#~ "SAGA, GRASS and R are supported. "
#~ "Algorithms relying on an external "
#~ "applications are managed by their own"
#~ " algorithm provider. Additional providers "
#~ "can be found as separate plugins, "
#~ "and installed using the QGIS Plugin "
#~ "Manager."
#~ msgstr ""

#~ msgid ""
#~ "This section will show you how to"
#~ " configure the Processing framework to "
#~ "include these additional applications, and "
#~ "it will explain some particular features"
#~ " of the algorithms based on them. "
#~ "Once you have correctly configured the"
#~ " system, you will be able to "
#~ "execute external algorithms from any "
#~ "component like the toolbox or the "
#~ "graphical modeler, just like you do "
#~ "with any other geoalgorithm."
#~ msgstr ""

#~ msgid ""
#~ "By default, all algorithms that rely "
#~ "on an external application not shipped"
#~ " with QGIS are not enabled. You "
#~ "can enable them in the settings "
#~ "dialog. Make sure that the corresponding"
#~ " application is already installed in "
#~ "your system."
#~ msgstr ""

#~ msgid ""
#~ "If you are not an advanced user"
#~ " and you are running QGIS on "
#~ "Windows, you might not be interested "
#~ "in reading the rest of this "
#~ "chapter. Make sure you install QGIS "
#~ "in your system using the standalone "
#~ "installer. That will automatically install "
#~ "SAGA and GRASS in your system and"
#~ " configure them so they can be "
#~ "run from QGIS. All the algorithms "
#~ "from these providers will be ready "
#~ "to be run without needing any "
#~ "further configuration. If installing through"
#~ " OSGeo4W application, make sure you "
#~ "select for installation SAGA and GRASS"
#~ " as well."
#~ msgstr ""

#~ msgid ""
#~ "When using an external software, opening"
#~ " a file in QGIS does not mean"
#~ " that it can be opened and "
#~ "processed as well in that other "
#~ "software. In most cases, other software"
#~ " can read what you have opened "
#~ "in QGIS, but in some cases, that"
#~ " might not be true. When using "
#~ "databases or uncommon file formats, "
#~ "whether for raster or vector layers, "
#~ "problems might arise. If that happens,"
#~ " try to use well-known file "
#~ "formats that you are sure are "
#~ "understood by both programs, and check"
#~ " the console output (in the history"
#~ " and log dialog) to know more "
#~ "about what is going wrong."
#~ msgstr ""

#~ msgid ""
#~ "Using GRASS raster layers is, for "
#~ "instance, one case in which you "
#~ "might have trouble and not be able"
#~ " to complete your work if you "
#~ "call an external algorithm using such"
#~ " a layer as input. For this "
#~ "reason, these layers will not appear "
#~ "as available to algorithms."
#~ msgstr ""

#~ msgid ""
#~ "You should, however, find no problems"
#~ " at all with vector layers, since "
#~ "QGIS automatically converts from the "
#~ "original file format to one accepted "
#~ "by the external application before "
#~ "passing the layer to it. This adds"
#~ " extra processing time, which might "
#~ "be significant if the layer has a"
#~ " large size, so do not be "
#~ "surprised if it takes more time to"
#~ " process a layer from a DB "
#~ "connection than it process a layer "
#~ "from a Shapefile format dataset of "
#~ "similar size."
#~ msgstr ""

#~ msgid ""
#~ "Regarding output formats, all formats "
#~ "supported by QGIS as output can be"
#~ " used, both for raster and vector "
#~ "layers. Some providers do not support"
#~ " certain formats, but all can export"
#~ " to common  formats that can later"
#~ " be transformed by QGIS automatically. "
#~ "As in the case of input layers,"
#~ " if this conversion is needed, that"
#~ " might increase the processing time."
#~ msgstr ""

#~ msgid ""
#~ "In other cases, exporting only selected"
#~ " features is needed, which causes "
#~ "execution times to be longer."
#~ msgstr ""

#~ msgid ""
#~ "SAGA algorithms can be run from "
#~ "QGIS if you have SAGA installed in"
#~ " your system and you configure the"
#~ " processing framework properly so it "
#~ "can find SAGA executables. In "
#~ "particular, the SAGA command-line "
#~ "executable is needed to run SAGA "
#~ "algorithms."
#~ msgstr ""

#~ msgid ""
#~ "Both the commands sent by QGIS and"
#~ " the additional information printed by "
#~ "SAGA can be logged along with "
#~ "other processing log messages, and you"
#~ " might find them useful to track "
#~ "in detail what is going on when"
#~ " QGIS runs a SAGA algorithm. You "
#~ "will find two settings, namely "
#~ ":guilabel:`Log console output` and "
#~ ":guilabel:`Log execution commands`, to "
#~ "activate that logging mechanism."
#~ msgstr ""

#~ msgid ""
#~ "Most other providers that use an "
#~ "external application and call it through"
#~ " the command-line have similar "
#~ "options, so you will find them as"
#~ " well in other places in the "
#~ "processing settings list."
#~ msgstr ""

#~ msgid ""
#~ "R integration in QGIS is different "
#~ "from that of SAGA in that there"
#~ " is not a predefined set of "
#~ "algorithms you can run (except for "
#~ "a few examples). Instead, you should "
#~ "write your scripts and call R "
#~ "commands, much like you would do "
#~ "from R, and in a very similar "
#~ "manner to what we saw in the "
#~ "section dedicated to processing scripts. "
#~ "This section shows you the syntax "
#~ "to use to call those R commands"
#~ " from QGIS and how to use QGIS"
#~ " objects (layers, tables) in them."
#~ msgstr ""

#~ msgid ""
#~ "for **Windows** user, usually the R "
#~ "executable file is in the "
#~ ":file:`C:\\\\Program Files\\\\R\\\\R-3.2` folder. "
#~ "Add just the folder and **NOT** "
#~ "the binary!"
#~ msgstr ""

#~ msgid ""
#~ "Once again, this is different in "
#~ "Linux, and you just have to make"
#~ " sure that the R folder is "
#~ "included in the PATH environment "
#~ "variable. If you can start R just"
#~ " typing ``R`` in a console, then "
#~ "you are ready to go."
#~ msgstr ""

#~ msgid ""
#~ "To add a new algorithm that calls"
#~ " an R function (or a more "
#~ "complex R script that you have "
#~ "developed and you would like to "
#~ "have available from QGIS), you have "
#~ "to create a script file that tells"
#~ " the processing framework how to "
#~ "perform that operation and the "
#~ "corresponding R commands to do so."
#~ msgstr ""

#~ msgid ""
#~ "The first lines, which start with "
#~ "a double Python comment sign (``##``),"
#~ " tell QGIS the inputs of the "
#~ "algorithm described in the file and "
#~ "the outputs that it will generate. "
#~ "They work with exactly the same "
#~ "syntax as the Processing scripts that"
#~ " we have already seen, so they "
#~ "will not be described here again."
#~ msgstr ""

#~ msgid ""
#~ "Please have a look at the :ref:`R"
#~ " Intro <r-intro>` and the :ref:`R "
#~ "Syntax <r-syntax>` Training Manual Chapters"
#~ " to have more information on how "
#~ "to write your own R scripts-"
#~ msgstr ""

#~ msgid ""
#~ "When you declare an input parameter, "
#~ "QGIS uses that information for two "
#~ "things: creating the user interface to"
#~ " ask the user for the value of"
#~ " that parameter and creating a "
#~ "corresponding R variable that can later"
#~ " be used as input for R "
#~ "commands."
#~ msgstr ""

#~ msgid ""
#~ "In the above example, we are "
#~ "declaring an input of type ``vector``"
#~ " named ``polyg``. When executing the "
#~ "algorithm, QGIS will open in R the"
#~ " layer selected by the user and "
#~ "store it in a variable also named"
#~ " ``polyg``. So, the name of a "
#~ "parameter is also the name of the"
#~ " variable that we can use in R"
#~ " for accessing the value of that "
#~ "parameter (thus, you should avoid using"
#~ " reserved R words as parameter "
#~ "names)."
#~ msgstr ""

#~ msgid ""
#~ "Spatial elements such as vector and "
#~ "raster layers are read using the "
#~ "``readOGR()`` and ``brick()`` commands (you"
#~ " do not have to worry about "
#~ "adding those commands to your "
#~ "description file -- QGIS will do "
#~ "it), and they are stored as "
#~ "``Spatial*DataFrame`` objects. Table fields "
#~ "are stored as strings containing the "
#~ "name of the selected field."
#~ msgstr ""

#~ msgid ""
#~ "Additionally, raster files can be read"
#~ " using the ``readGDAL()`` command instead"
#~ " of ``brick()`` by using the "
#~ "``##usereadgdal``."
#~ msgstr ""

#~ msgid ""
#~ "If you are an advanced user and"
#~ " do not want QGIS to create the"
#~ " object representing the layer, you "
#~ "can use the ``##passfilenames`` tag to"
#~ " indicate that you prefer a string"
#~ " with the filename instead. In this"
#~ " case, it is up to you to "
#~ "open the file before performing any "
#~ "operation on the data it contains."
#~ msgstr ""

#~ msgid ""
#~ "With the above information, we can "
#~ "now understand the first line of "
#~ "our first example script (the first "
#~ "line not starting with a Python "
#~ "comment)."
#~ msgstr ""

#~ msgid ""
#~ "The variable ``polygon`` already contains "
#~ "a ``SpatialPolygonsDataFrame`` object, so it"
#~ " can be used to call the "
#~ "``spsample`` method, just like the "
#~ "``numpoints`` one, which indicates the "
#~ "number of points to add to the "
#~ "created sample grid."
#~ msgstr ""

#~ msgid ""
#~ "Since we have declared an output "
#~ "of type vector named ``out``, we "
#~ "have to create a variable named "
#~ "``out`` and store a ``Spatial*DataFrame`` "
#~ "object in it (in this case, a "
#~ "``SpatialPointsDataFrame``). You can use any"
#~ " name for your intermediate variables. "
#~ "Just make sure that the variable "
#~ "storing your final result has the "
#~ "same name that you used to declare"
#~ " it, and that it contains a "
#~ "suitable value."
#~ msgstr ""

#~ msgid ""
#~ "In this case, the result obtained "
#~ "from the ``spsample`` method has to "
#~ "be converted explicitly into a "
#~ "``SpatialPointsDataFrame`` object, since it is"
#~ " itself an object of class ``ppp``,"
#~ " which is not a suitable class "
#~ "to be returned to QGIS."
#~ msgstr ""

#~ msgid ""
#~ "If you have used the ``##passfilenames``"
#~ " option, outputs are generated using "
#~ "the ``raster`` package (with "
#~ "``writeRaster()``), even though it is "
#~ "not used for the inputs."
#~ msgstr ""

#~ msgid ""
#~ "If your algorithm does not generate "
#~ "any layer, but rather a text "
#~ "result in the console instead, you "
#~ "have to indicate that you want the"
#~ " console to be shown once the "
#~ "execution is finished. To do so, "
#~ "just start the command lines that "
#~ "produce the results you want to "
#~ "print with the ``>`` ('greater') sign."
#~ " The output of all other lines "
#~ "will not be shown. For instance, "
#~ "here is the description file of an"
#~ " algorithm that performs a normality "
#~ "test on a given field (column) of"
#~ " the attributes of a vector layer:"
#~ msgstr ""

#~ msgid ""
#~ "``rgdal`` and ``raster`` libraries are "
#~ "loaded by default, so you do not"
#~ " have to add the corresponding "
#~ "``library()`` commands (you just have to"
#~ " make sure that those two packages"
#~ " are installed in your R "
#~ "distribution). However, other additional "
#~ "libraries that you might need have "
#~ "to be explicitly loaded by typing, "
#~ "``library(ggplot2)``. If the package is "
#~ "not already installed on your machine,"
#~ " Processing will download and install "
#~ "it. In this way the package will"
#~ " be also available in R Standalone."
#~ " **Be aware** that if the package "
#~ "has to be downloaded, the first "
#~ "time you run the script it might"
#~ " take a long time."
#~ msgstr ""

#~ msgid ""
#~ "By default, the Processing framework "
#~ "tries to configure its GRASS connector"
#~ " to use the GRASS distribution that"
#~ " ships along with QGIS. This should"
#~ " work without problems in most "
#~ "systems, but if you experience problems,"
#~ " you might have to configure the "
#~ "GRASS connector manually. Also, if you"
#~ " want to use a different GRASS "
#~ "installation, you can change that "
#~ "setting and point to the folder "
#~ "where the other version is installed."
#~ " GRASS 7 is needed for algorithms "
#~ "to work correctly."
#~ msgstr ""

#~ msgid ""
#~ "If you are running Linux, you just"
#~ " have to make sure that GRASS "
#~ "is correctly installed, and that it "
#~ "can be run without problem from a"
#~ " console."
#~ msgstr ""

#~ msgid ""
#~ "The processing framework can be extended"
#~ " using additional applications. Currently, "
#~ "SAGA, GRASS, R, TauDEM and LAStools "
#~ "are supported (and GDAL is shipped "
#~ "with QGIS). Algorithms that rely on "
#~ "external applications are managed by "
#~ "their own algorithm providers. Additional "
#~ "providers can be found as separate "
#~ "plugins, and installed using the QGIS"
#~ " Plugin Manager."
#~ msgstr ""

#~ msgid "R. Creating R scripts"
#~ msgstr ""

#~ msgid ""
#~ "To enable R in Processing you need"
#~ " to install the **Processing R "
#~ "Provider** plugin."
#~ msgstr ""

#~ msgid ""
#~ "R integration in QGIS is different "
#~ "from that of SAGA in that there"
#~ " is not a predefined set of "
#~ "algorithms you can run (except for "
#~ "a few examples). Instead, you should "
#~ "write your scripts and call R "
#~ "commands, much like you would do "
#~ "from R, and in a very similar "
#~ "manner to what we saw in the "
#~ "section dedicated to processing scripts. "
#~ "This section shows you the syntax "
#~ "to use to use R commands in "
#~ "QGIS and how to use QGIS objects"
#~ " (layers, tables) in them."
#~ msgstr ""

#~ msgid ""
#~ "The first thing you have to do,"
#~ " as we saw in the case of "
#~ "SAGA, is to tell QGIS where your"
#~ " R binaries are located. You can "
#~ "do this using the :guilabel:`R folder`"
#~ " entry in the processing configuration "
#~ "dialog. Once you have set that "
#~ "parameter, you can start creating and"
#~ " executing your own R scripts."
#~ msgstr ""

#~ msgid ""
#~ "On **Windows** the R executable file "
#~ "is normally in the :file:`C:\\\\Program "
#~ "Files\\\\R\\\\R-3.2` folder. Specify the "
#~ "folder and **NOT** the binary!"
#~ msgstr ""

#~ msgid ""
#~ "Once again, this is different in "
#~ "Linux, and you just have to make"
#~ " sure that the R folder is "
#~ "included in the PATH environment "
#~ "variable. If you can start R by"
#~ " typing ``R`` in a terminal window,"
#~ " then you are ready to go."
#~ msgstr ""

#~ msgid ""
#~ "R script files have the extension "
#~ ":file:`.rsx`, and creating them is "
#~ "pretty easy if you just have a "
#~ "basic knowledge of R syntax and R"
#~ " scripting. They should be stored in"
#~ " the R scripts folder. You can "
#~ "set this folder in the :guilabel:`R` "
#~ "settings group (available from the "
#~ "processing settings dialog), just like "
#~ "you do with the folder for regular"
#~ " processing scripts."
#~ msgstr ""

#~ msgid ""
#~ "Let’s have a look at a very "
#~ "simple script file, which calls the "
#~ "R method ``spsample`` to create a "
#~ "random grid within the boundary of "
#~ "the polygons in a given polygon "
#~ "layer. This method belongs to the "
#~ "``maptools`` package. Since almost all "
#~ "the algorithms that you might like "
#~ "to incorporate into QGIS will use "
#~ "or generate spatial data, knowledge of"
#~ " spatial packages like ``maptools`` and,"
#~ " especially, ``sp``, is mandatory."
#~ msgstr ""

#~ msgid ""
#~ "Please have a look at the :ref:`R"
#~ " Intro <r-intro>` and the :ref:`R "
#~ "Syntax <r-syntax>` Training Manual Chapters"
#~ " to find more information about how"
#~ " to write your own R scripts."
#~ msgstr ""

#~ msgid ""
#~ "When you declare an input parameter, "
#~ "QGIS uses that information for two "
#~ "things: creating the user interface to"
#~ " ask the user for the value of"
#~ " that parameter, and creating a "
#~ "corresponding R variable that can later"
#~ " be used as input for R "
#~ "commands."
#~ msgstr ""

#~ msgid ""
#~ "In the above example, we have "
#~ "declared an input of type ``vector`` "
#~ "named ``polyg``. When executing the "
#~ "algorithm, QGIS will open the layer "
#~ "selected by the user and store it"
#~ " in a variable named ``polyg``. So,"
#~ " the name of a parameter is the"
#~ " name of the variable that we "
#~ "use in R for accessing the value"
#~ " of that parameter (you should "
#~ "therefore avoid using reserved R words"
#~ " as parameter names)."
#~ msgstr ""

#~ msgid ""
#~ "Let’s have a look at a very "
#~ "simple script file, which calls the "
#~ "R method ``spsample`` to create a "
#~ "random grid within the boundary of "
#~ "the polygons in a given polygon "
#~ "layer. This method belongs to the "
#~ "``maptools`` package. Since almost all "
#~ "the algorithms that you might like "
#~ "to incorporate into QGIS will use "
#~ "or generate spatial data, knowledge of"
#~ " spatial packages like ``maptools`` and "
#~ "``sp``/``sf``, is necessary."
#~ msgstr ""

#~ msgid ""
#~ "The first lines, which start with "
#~ "a double Python comment sign (``##``),"
#~ " tell QGIS about the inputs of "
#~ "the algorithm in the file and the"
#~ " outputs that it will generate."
#~ msgstr ""

#~ msgid ""
#~ "To find out more about how to "
#~ "write your own R scripts, have a"
#~ " look at the :ref:`R Intro <r-intro>`"
#~ " and the :ref:`R Syntax <r-syntax>` "
#~ "Training Manual Chapters."
#~ msgstr ""

#~ msgid ""
#~ "When you declare an input parameter, "
#~ "QGIS uses that information for two "
#~ "things: creating the user interface to"
#~ " ask the user for the value of"
#~ " that parameter, and creating a "
#~ "corresponding R variable that can later"
#~ " be used as R function input."
#~ msgstr ""

#~ msgid ""
#~ "In the above example, we have "
#~ "declared an input of type ``vector``,"
#~ " named ``polyg``. When executing the "
#~ "algorithm, QGIS will open the layer "
#~ "selected by the user and store it"
#~ " in a variable named ``polyg``. So,"
#~ " the name of a parameter is the"
#~ " name of the variable that we "
#~ "can use in R for accessing the "
#~ "value of that parameter (you should "
#~ "therefore avoid using reserved R words"
#~ " as parameter names)."
#~ msgstr ""

#~ msgid ""
#~ "Spatial parameters such as vector and"
#~ " raster layers are read using the "
#~ "``readOGR()`` and ``brick()`` commands (you"
#~ " do not have to worry about "
#~ "adding those commands to your "
#~ "description file -- QGIS will do "
#~ "it), and they are stored as "
#~ "``Spatial*DataFrame`` objects. Table fields "
#~ "are stored as strings containing the "
#~ "name of the selected field."
#~ msgstr ""

#~ msgid ""
#~ "Tables are opened using the "
#~ "``read.csv()`` command. If a table "
#~ "entered by the user is not in "
#~ "CSV format, it will be converted "
#~ "prior to importing it into R."
#~ msgstr ""

#~ msgid ""
#~ "Raster files can be read using the"
#~ " ``readGDAL()`` command instead of "
#~ "``brick()`` by specifying ``##usereadgdal``."
#~ msgstr ""

#~ msgid ""
#~ "If you are an advanced user and"
#~ " do not want QGIS to create the"
#~ " object representing the layer, you "
#~ "can use ``##passfilenames`` to indicate "
#~ "that you prefer a string with the"
#~ " filename instead. In this case, it"
#~ " is up to you to open the "
#~ "file before performing any operation on"
#~ " the data it contains."
#~ msgstr ""

#~ msgid ""
#~ "With the above information, we can "
#~ "now understand the first line of "
#~ "this script (the first line not "
#~ "starting with a Python comment)."
#~ msgstr ""

#~ msgid ""
#~ "The variable ``polyg`` already contains "
#~ "a ``SpatialPolygonsDataFrame`` object, so it"
#~ " can be used when calling the "
#~ "``spsample`` method, just like the "
#~ "``numpoints`` one, which specifies the "
#~ "number of points to add to the "
#~ "created sample grid."
#~ msgstr ""

#~ msgid ""
#~ "Since we have declared a vector "
#~ "output named ``out``, we have to "
#~ "create a variable named ``out`` and "
#~ "store a ``Spatial*DataFrame`` object in "
#~ "it (in this case, a "
#~ "``SpatialPointsDataFrame``). You can use any"
#~ " name for your intermediate variables. "
#~ "Just make sure that the variable "
#~ "storing your final result has the "
#~ "same name that you used to declare"
#~ " it, and that it contains a "
#~ "suitable value."
#~ msgstr ""

#~ msgid ""
#~ "In this case, the result obtained "
#~ "from the ``spsample`` method has to "
#~ "be converted explicitly into a "
#~ "``SpatialPointsDataFrame`` object, since it is"
#~ " itself an object of class ``ppp``,"
#~ " which can not be returned to "
#~ "QGIS."
#~ msgstr ""

#~ msgid ""
#~ "If you have used the ``##passfilenames``"
#~ " option, outputs are generated using "
#~ "the ``raster`` package (with "
#~ "``writeRaster()``)."
#~ msgstr ""

#~ msgid ""
#~ "If your algorithm does not generate "
#~ "a layer, but a text result in "
#~ "the console instead, you have to "
#~ "indicate that you want the console "
#~ "to be shown once the execution is"
#~ " finished. To do so, just start "
#~ "the command lines that produce the "
#~ "results you want to print with the"
#~ " ``>`` ('greater') sign. The output "
#~ "of all other lines will not be "
#~ "shown. For instance, here is the "
#~ "description file of an algorithm that"
#~ " performs a normality test on a "
#~ "given field (column) of the attributes"
#~ " of a vector layer:"
#~ msgstr ""

#~ msgid ""
#~ "If your algorithm creates any kind "
#~ "of graphics (using the ``plot()`` "
#~ "method), add the following line:"
#~ msgstr ""

#~ msgid ""
#~ "Both graphics and console results will"
#~ " be shown in the processing results"
#~ " manager."
#~ msgstr ""

#~ msgid ""
#~ "For more information, please check the"
#~ " script files provided with Processing. "
#~ "Most of them are rather simple and"
#~ " will greatly help you understand how"
#~ " to create your own scripts."
#~ msgstr ""

#~ msgid ""
#~ "The ``rgdal`` and ``raster`` libraries "
#~ "are loaded by default, so you do"
#~ " not have to add the corresponding"
#~ " ``library()`` commands (you just have "
#~ "to make sure that those two "
#~ "packages are installed in your R "
#~ "distribution). However, other additional "
#~ "libraries that you might need have "
#~ "to be explicitly loaded by typing: "
#~ "``library(ggplot2)`` (to load the ``ggplot2``"
#~ " library). If the package is not "
#~ "already installed on your machine, "
#~ "Processing will download and install it."
#~ " In this way the package will "
#~ "be also available in R Standalone. "
#~ "**Be aware** that if the package "
#~ "has to be downloaded, the first "
#~ "time you run the script it might"
#~ " take a long time."
#~ msgstr ""

#~ msgid ""
#~ "The R script *sf_test* tries to "
#~ "load ``sf`` and ``raster``. If these "
#~ "two packages are not installed, R "
#~ "may try to load and install them."
#~ msgstr ""

#~ msgid ""
#~ "The following R libraries end up "
#~ "in "
#~ ":file:`~/.local/share/QGIS/QGIS3/profiles/default/processing/rscripts`"
#~ " after ``sf_test`` has been run from"
#~ " the Processing Toolbox on Ubuntu "
#~ "with version 2.0 of the *Processing "
#~ "R Provider* plugin and R 3.4.4 "
#~ "(*apt* package ``r-base-core`` only):"
#~ msgstr ""

#~ msgid ""
#~ "SAGA algorithms can be run from "
#~ "QGIS if you have SAGA installed "
#~ "and you configure the processing "
#~ "framework to find SAGA executables. In"
#~ " particular, the SAGA command-line "
#~ "executable is needed to run SAGA "
#~ "algorithms."
#~ msgstr ""

#~ msgid ""
#~ "If you are running Windows, both "
#~ "the stand-alone installer and the "
#~ "OSGeo4W installer include SAGA along "
#~ "with QGIS, and the path is "
#~ "automatically configured, so there is no"
#~ " need to do anything else."
#~ msgstr ""

#~ msgid ""
#~ "If you have installed SAGA yourself "
#~ "and your QGIS installer did not "
#~ "include it, the path to the SAGA"
#~ " executable must be configured. To do"
#~ " this, open the configuration dialog. "
#~ "In the :guilabel:`SAGA` block, you will"
#~ " find a setting named :guilabel:`SAGA "
#~ "Folder`. Enter the path to the "
#~ "folder where SAGA is installed. Close"
#~ " the configuration dialog, and now "
#~ "you are ready to run SAGA "
#~ "algorithms from QGIS."
#~ msgstr ""

#~ msgid ""
#~ "If you are running Linux, SAGA "
#~ "binaries are not included with "
#~ "Processing, so you have to download "
#~ "and install the software yourself. "
#~ "Please check the SAGA website for "
#~ "more information."
#~ msgstr ""

#~ msgid ""
#~ "In this case, there is no need "
#~ "to configure the path to the SAGA"
#~ " executable, and you will not see "
#~ "those folder entries. Instead, you must"
#~ " make sure that SAGA is properly "
#~ "installed and its folder is added "
#~ "to the PATH environment variable. Just"
#~ " open a console and type ``saga_cmd``"
#~ " to check that the system can "
#~ "find where the SAGA binaries are "
#~ "located."
#~ msgstr ""

#~ msgid ""
#~ "Configuration is done in "
#~ ":menuselection:`Provider-> R` in the "
#~ ":guilabel:`Processing` tab of "
#~ ":menuselection:`Settings-> Options`."
#~ msgstr ""

#~ msgid ""
#~ ":guilabel:`test_sf` does some operations that"
#~ " depend on the ``sf`` package and "
#~ "can be used to check if the "
#~ "R package ``sf`` is installed. If "
#~ "the package is not installed, R "
#~ "will try to install it (and all"
#~ " the packages it depends on) for "
#~ "you, using the :guilabel:`Package repository`"
#~ " specified in :menuselection:`Provider-> R` "
#~ "in the Processing options. The default"
#~ " is `http://cran.at.r-project.org/`. Installing "
#~ "may take some time..."
#~ msgstr ""

#~ msgid "Open it (Plugins-> Resource Sharing-> Resource Sharing)"
#~ msgstr ""

#~ msgid ""
#~ "Open the Processing settings "
#~ "(:menuselection:`Settings-> Options-> Processing` "
#~ "tab)"
#~ msgstr ""

#~ msgid "Go to :menuselection:`Providers-> R-> R scripts folder`"
#~ msgstr ""

#~ msgid ""
#~ "C:\\Users\\<user>\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\resource_sharing\\repositories\\github.com\\qgis"
#~ "\\QGIS-Resources\\collections\\rscripts"
#~ msgstr ""

#~ msgid ""
#~ "To edit, double-click.  You can "
#~ "then choose to just paste / type"
#~ " the path, or you can navigate "
#~ "to the directory by using the "
#~ ":guilabel:`...` button and press the "
#~ ":guilabel:`Add` button in the dialog "
#~ "that opens. It is possible to "
#~ "provide several directories here. They "
#~ "will be separated by a semicolon "
#~ "(\";\")."
#~ msgstr ""

#~ msgid ""
#~ "LAStools is activated and configured in"
#~ " the Processing options (:menuselection:`Settings"
#~ " --> Options`, :guilabel:`Processing` tab, "
#~ ":menuselection:`Providers--> LAStools`), where you"
#~ " can specify the location of LAStools"
#~ " (:guilabel:`LAStools folder`) and Wine "
#~ "(:guilabel:`Wine folder`). On Ubuntu, the "
#~ "default Wine folder is :file:`/usr/bin`."
#~ msgstr ""

