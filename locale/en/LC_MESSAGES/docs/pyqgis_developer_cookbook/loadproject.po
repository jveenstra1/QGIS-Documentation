# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project testing\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-10 11:07+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:6
msgid ""
"The code snippets on this page need the following imports if you're "
"outside the pyqgis console:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:34
msgid "Loading Projects"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:36
msgid ""
"Sometimes you need to load an existing project from a plugin or (more "
"often) when developing a standalone QGIS Python application (see: "
":ref:`pythonapplications`)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:43
msgid ""
"To load a project into the current QGIS application you need to create an"
" instance of the :class:`QgsProject <qgis.core.QgsProject>` class. This "
"is a singleton class, so you must use its :meth:`instance() "
"<qgis.core.QgsProject.instance>` method to do it. You can call its "
":meth:`read() <qgis.core.QgsProject.read>` method, passing the path of "
"the project to be loaded:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:74
msgid ""
"If you need to make modifications to the project (for example to add or "
"remove some layers) and save your changes, call the :meth:`write() "
"<qgis.core.QgsProject.write>` method of your project instance. The "
":meth:`write() <qgis.core.QgsProject.write>` method also accepts an "
"optional path for saving the project to a new location:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:86
msgid ""
"Both :meth:`read() <qgis.core.QgsProject.read>` and :meth:`write() "
"<qgis.core.QgsProject.write>` functions return a boolean value that you "
"can use to check if the operation was successful."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/loadproject.rst:92
msgid ""
"If you are writing a QGIS standalone application, in order to synchronise"
" the loaded project with the canvas you need to instantiate a "
":class:`QgsLayerTreeMapCanvasBridge "
"<qgis.gui.QgsLayerTreeMapCanvasBridge>` as in the example below:"
msgstr ""

#~ msgid ""
#~ "Sometimes you need to load an "
#~ "existing project from a plugin or "
#~ "(more often) when developing a stand-"
#~ "alone QGIS Python application (see: "
#~ ":ref:`pythonapplications`)."
#~ msgstr ""

#~ msgid ""
#~ "To load a project into the current"
#~ " QGIS application you need a "
#~ ":class:`QgsProject` :func:`instance()` object and"
#~ " call its :func:`read()` method passing "
#~ "to it a :class:`QFileInfo` object that"
#~ " contains the path from where the "
#~ "project will be loaded::"
#~ msgstr ""

#~ msgid ""
#~ "In case you need to make some "
#~ "modifications to the project (for "
#~ "example add or remove some layers) "
#~ "and save your changes, you can "
#~ "call the :func:`write()` method of your"
#~ " project instance. The :func:`write()` "
#~ "method also accepts an optional "
#~ ":class:`QFileInfo` that allows you to "
#~ "specify a path where the project "
#~ "will be saved::"
#~ msgstr ""

#~ msgid ""
#~ "Both :func:`read()` and :func:`write()` "
#~ "funtions return a boolean value that "
#~ "you can use to check if the "
#~ "operation was successful."
#~ msgstr ""

#~ msgid ""
#~ "If you are writing a QGIS "
#~ "standalone application, in order to "
#~ "synchronise the loaded project with the"
#~ " canvas you need to instanciate a "
#~ ":class:`QgsLayerTreeMapCanvasBridge` as in the "
#~ "example below::"
#~ msgstr ""

#~ msgid ""
#~ "If you need to make modifications "
#~ "to the project (for example to add"
#~ " or remove some layers) and save "
#~ "your changes, call the :meth:`write() "
#~ "<qgis.core.QgsProject.write>` method of your "
#~ "project instance. The :func:`write()` method"
#~ " also accepts an optional path for"
#~ " saving the project to a new "
#~ "location:"
#~ msgstr ""

